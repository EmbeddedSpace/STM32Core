
ADC_Single_Channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004994  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c18  08004c18  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004c18  08004c18  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c18  08004c18  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c18  08004c18  00014c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c1c  08004c1c  00014c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  08004c88  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08004c88  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f235  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d5  00000000  00000000  0002f309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1b  00000000  00000000  00032a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf3a  00000000  00000000  0003355b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001271b  00000000  00000000  0004f495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0071  00000000  00000000  00061bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004350  00000000  00000000  00101c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00105f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000068 	.word	0x20000068
 8000200:	00000000 	.word	0x00000000
 8000204:	08004b60 	.word	0x08004b60

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000006c 	.word	0x2000006c
 8000220:	08004b60 	.word	0x08004b60

08000224 <__aeabi_drsub>:
 8000224:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__adddf3>
 800022a:	bf00      	nop

0800022c <__aeabi_dsub>:
 800022c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000230 <__adddf3>:
 8000230:	b530      	push	{r4, r5, lr}
 8000232:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000236:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023a:	ea94 0f05 	teq	r4, r5
 800023e:	bf08      	it	eq
 8000240:	ea90 0f02 	teqeq	r0, r2
 8000244:	bf1f      	itttt	ne
 8000246:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000252:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000256:	f000 80e2 	beq.w	800041e <__adddf3+0x1ee>
 800025a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000262:	bfb8      	it	lt
 8000264:	426d      	neglt	r5, r5
 8000266:	dd0c      	ble.n	8000282 <__adddf3+0x52>
 8000268:	442c      	add	r4, r5
 800026a:	ea80 0202 	eor.w	r2, r0, r2
 800026e:	ea81 0303 	eor.w	r3, r1, r3
 8000272:	ea82 0000 	eor.w	r0, r2, r0
 8000276:	ea83 0101 	eor.w	r1, r3, r1
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	2d36      	cmp	r5, #54	; 0x36
 8000284:	bf88      	it	hi
 8000286:	bd30      	pophi	{r4, r5, pc}
 8000288:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000290:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000294:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x70>
 800029a:	4240      	negs	r0, r0
 800029c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x84>
 80002ae:	4252      	negs	r2, r2
 80002b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b4:	ea94 0f05 	teq	r4, r5
 80002b8:	f000 80a7 	beq.w	800040a <__adddf3+0x1da>
 80002bc:	f1a4 0401 	sub.w	r4, r4, #1
 80002c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c4:	db0d      	blt.n	80002e2 <__adddf3+0xb2>
 80002c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ca:	fa22 f205 	lsr.w	r2, r2, r5
 80002ce:	1880      	adds	r0, r0, r2
 80002d0:	f141 0100 	adc.w	r1, r1, #0
 80002d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d8:	1880      	adds	r0, r0, r2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	4159      	adcs	r1, r3
 80002e0:	e00e      	b.n	8000300 <__adddf3+0xd0>
 80002e2:	f1a5 0520 	sub.w	r5, r5, #32
 80002e6:	f10e 0e20 	add.w	lr, lr, #32
 80002ea:	2a01      	cmp	r2, #1
 80002ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f0:	bf28      	it	cs
 80002f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	18c0      	adds	r0, r0, r3
 80002fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000300:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000304:	d507      	bpl.n	8000316 <__adddf3+0xe6>
 8000306:	f04f 0e00 	mov.w	lr, #0
 800030a:	f1dc 0c00 	rsbs	ip, ip, #0
 800030e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000312:	eb6e 0101 	sbc.w	r1, lr, r1
 8000316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031a:	d31b      	bcc.n	8000354 <__adddf3+0x124>
 800031c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000320:	d30c      	bcc.n	800033c <__adddf3+0x10c>
 8000322:	0849      	lsrs	r1, r1, #1
 8000324:	ea5f 0030 	movs.w	r0, r0, rrx
 8000328:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800032c:	f104 0401 	add.w	r4, r4, #1
 8000330:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000334:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000338:	f080 809a 	bcs.w	8000470 <__adddf3+0x240>
 800033c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000340:	bf08      	it	eq
 8000342:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000346:	f150 0000 	adcs.w	r0, r0, #0
 800034a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034e:	ea41 0105 	orr.w	r1, r1, r5
 8000352:	bd30      	pop	{r4, r5, pc}
 8000354:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000358:	4140      	adcs	r0, r0
 800035a:	eb41 0101 	adc.w	r1, r1, r1
 800035e:	3c01      	subs	r4, #1
 8000360:	bf28      	it	cs
 8000362:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000366:	d2e9      	bcs.n	800033c <__adddf3+0x10c>
 8000368:	f091 0f00 	teq	r1, #0
 800036c:	bf04      	itt	eq
 800036e:	4601      	moveq	r1, r0
 8000370:	2000      	moveq	r0, #0
 8000372:	fab1 f381 	clz	r3, r1
 8000376:	bf08      	it	eq
 8000378:	3320      	addeq	r3, #32
 800037a:	f1a3 030b 	sub.w	r3, r3, #11
 800037e:	f1b3 0220 	subs.w	r2, r3, #32
 8000382:	da0c      	bge.n	800039e <__adddf3+0x16e>
 8000384:	320c      	adds	r2, #12
 8000386:	dd08      	ble.n	800039a <__adddf3+0x16a>
 8000388:	f102 0c14 	add.w	ip, r2, #20
 800038c:	f1c2 020c 	rsb	r2, r2, #12
 8000390:	fa01 f00c 	lsl.w	r0, r1, ip
 8000394:	fa21 f102 	lsr.w	r1, r1, r2
 8000398:	e00c      	b.n	80003b4 <__adddf3+0x184>
 800039a:	f102 0214 	add.w	r2, r2, #20
 800039e:	bfd8      	it	le
 80003a0:	f1c2 0c20 	rsble	ip, r2, #32
 80003a4:	fa01 f102 	lsl.w	r1, r1, r2
 80003a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003ac:	bfdc      	itt	le
 80003ae:	ea41 010c 	orrle.w	r1, r1, ip
 80003b2:	4090      	lslle	r0, r2
 80003b4:	1ae4      	subs	r4, r4, r3
 80003b6:	bfa2      	ittt	ge
 80003b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003bc:	4329      	orrge	r1, r5
 80003be:	bd30      	popge	{r4, r5, pc}
 80003c0:	ea6f 0404 	mvn.w	r4, r4
 80003c4:	3c1f      	subs	r4, #31
 80003c6:	da1c      	bge.n	8000402 <__adddf3+0x1d2>
 80003c8:	340c      	adds	r4, #12
 80003ca:	dc0e      	bgt.n	80003ea <__adddf3+0x1ba>
 80003cc:	f104 0414 	add.w	r4, r4, #20
 80003d0:	f1c4 0220 	rsb	r2, r4, #32
 80003d4:	fa20 f004 	lsr.w	r0, r0, r4
 80003d8:	fa01 f302 	lsl.w	r3, r1, r2
 80003dc:	ea40 0003 	orr.w	r0, r0, r3
 80003e0:	fa21 f304 	lsr.w	r3, r1, r4
 80003e4:	ea45 0103 	orr.w	r1, r5, r3
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f1c4 040c 	rsb	r4, r4, #12
 80003ee:	f1c4 0220 	rsb	r2, r4, #32
 80003f2:	fa20 f002 	lsr.w	r0, r0, r2
 80003f6:	fa01 f304 	lsl.w	r3, r1, r4
 80003fa:	ea40 0003 	orr.w	r0, r0, r3
 80003fe:	4629      	mov	r1, r5
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	fa21 f004 	lsr.w	r0, r1, r4
 8000406:	4629      	mov	r1, r5
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f094 0f00 	teq	r4, #0
 800040e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000412:	bf06      	itte	eq
 8000414:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000418:	3401      	addeq	r4, #1
 800041a:	3d01      	subne	r5, #1
 800041c:	e74e      	b.n	80002bc <__adddf3+0x8c>
 800041e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000422:	bf18      	it	ne
 8000424:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000428:	d029      	beq.n	800047e <__adddf3+0x24e>
 800042a:	ea94 0f05 	teq	r4, r5
 800042e:	bf08      	it	eq
 8000430:	ea90 0f02 	teqeq	r0, r2
 8000434:	d005      	beq.n	8000442 <__adddf3+0x212>
 8000436:	ea54 0c00 	orrs.w	ip, r4, r0
 800043a:	bf04      	itt	eq
 800043c:	4619      	moveq	r1, r3
 800043e:	4610      	moveq	r0, r2
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea91 0f03 	teq	r1, r3
 8000446:	bf1e      	ittt	ne
 8000448:	2100      	movne	r1, #0
 800044a:	2000      	movne	r0, #0
 800044c:	bd30      	popne	{r4, r5, pc}
 800044e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000452:	d105      	bne.n	8000460 <__adddf3+0x230>
 8000454:	0040      	lsls	r0, r0, #1
 8000456:	4149      	adcs	r1, r1
 8000458:	bf28      	it	cs
 800045a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000464:	bf3c      	itt	cc
 8000466:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046a:	bd30      	popcc	{r4, r5, pc}
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000474:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000478:	f04f 0000 	mov.w	r0, #0
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf1a      	itte	ne
 8000484:	4619      	movne	r1, r3
 8000486:	4610      	movne	r0, r2
 8000488:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800048c:	bf1c      	itt	ne
 800048e:	460b      	movne	r3, r1
 8000490:	4602      	movne	r2, r0
 8000492:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000496:	bf06      	itte	eq
 8000498:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800049c:	ea91 0f03 	teqeq	r1, r3
 80004a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	bf00      	nop

080004a8 <__aeabi_ui2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f04f 0500 	mov.w	r5, #0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e750      	b.n	8000368 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_i2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e0:	bf48      	it	mi
 80004e2:	4240      	negmi	r0, r0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e73e      	b.n	8000368 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_f2d>:
 80004ec:	0042      	lsls	r2, r0, #1
 80004ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fa:	bf1f      	itttt	ne
 80004fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000500:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000504:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000508:	4770      	bxne	lr
 800050a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050e:	bf08      	it	eq
 8000510:	4770      	bxeq	lr
 8000512:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000516:	bf04      	itt	eq
 8000518:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800052c:	e71c      	b.n	8000368 <__adddf3+0x138>
 800052e:	bf00      	nop

08000530 <__aeabi_ul2d>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	b530      	push	{r4, r5, lr}
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	e00a      	b.n	8000556 <__aeabi_l2d+0x16>

08000540 <__aeabi_l2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054e:	d502      	bpl.n	8000556 <__aeabi_l2d+0x16>
 8000550:	4240      	negs	r0, r0
 8000552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000556:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000562:	f43f aed8 	beq.w	8000316 <__adddf3+0xe6>
 8000566:	f04f 0203 	mov.w	r2, #3
 800056a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056e:	bf18      	it	ne
 8000570:	3203      	addne	r2, #3
 8000572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000576:	bf18      	it	ne
 8000578:	3203      	addne	r2, #3
 800057a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057e:	f1c2 0320 	rsb	r3, r2, #32
 8000582:	fa00 fc03 	lsl.w	ip, r0, r3
 8000586:	fa20 f002 	lsr.w	r0, r0, r2
 800058a:	fa01 fe03 	lsl.w	lr, r1, r3
 800058e:	ea40 000e 	orr.w	r0, r0, lr
 8000592:	fa21 f102 	lsr.w	r1, r1, r2
 8000596:	4414      	add	r4, r2
 8000598:	e6bd      	b.n	8000316 <__adddf3+0xe6>
 800059a:	bf00      	nop

0800059c <__aeabi_frsub>:
 800059c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80005a0:	e002      	b.n	80005a8 <__addsf3>
 80005a2:	bf00      	nop

080005a4 <__aeabi_fsub>:
 80005a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080005a8 <__addsf3>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	bf1f      	itttt	ne
 80005ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80005b0:	ea92 0f03 	teqne	r2, r3
 80005b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80005b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005bc:	d06a      	beq.n	8000694 <__addsf3+0xec>
 80005be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80005c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80005c6:	bfc1      	itttt	gt
 80005c8:	18d2      	addgt	r2, r2, r3
 80005ca:	4041      	eorgt	r1, r0
 80005cc:	4048      	eorgt	r0, r1
 80005ce:	4041      	eorgt	r1, r0
 80005d0:	bfb8      	it	lt
 80005d2:	425b      	neglt	r3, r3
 80005d4:	2b19      	cmp	r3, #25
 80005d6:	bf88      	it	hi
 80005d8:	4770      	bxhi	lr
 80005da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80005e6:	bf18      	it	ne
 80005e8:	4240      	negne	r0, r0
 80005ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80005f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80005f6:	bf18      	it	ne
 80005f8:	4249      	negne	r1, r1
 80005fa:	ea92 0f03 	teq	r2, r3
 80005fe:	d03f      	beq.n	8000680 <__addsf3+0xd8>
 8000600:	f1a2 0201 	sub.w	r2, r2, #1
 8000604:	fa41 fc03 	asr.w	ip, r1, r3
 8000608:	eb10 000c 	adds.w	r0, r0, ip
 800060c:	f1c3 0320 	rsb	r3, r3, #32
 8000610:	fa01 f103 	lsl.w	r1, r1, r3
 8000614:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000618:	d502      	bpl.n	8000620 <__addsf3+0x78>
 800061a:	4249      	negs	r1, r1
 800061c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000620:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000624:	d313      	bcc.n	800064e <__addsf3+0xa6>
 8000626:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800062a:	d306      	bcc.n	800063a <__addsf3+0x92>
 800062c:	0840      	lsrs	r0, r0, #1
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	f102 0201 	add.w	r2, r2, #1
 8000636:	2afe      	cmp	r2, #254	; 0xfe
 8000638:	d251      	bcs.n	80006de <__addsf3+0x136>
 800063a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800063e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000642:	bf08      	it	eq
 8000644:	f020 0001 	biceq.w	r0, r0, #1
 8000648:	ea40 0003 	orr.w	r0, r0, r3
 800064c:	4770      	bx	lr
 800064e:	0049      	lsls	r1, r1, #1
 8000650:	eb40 0000 	adc.w	r0, r0, r0
 8000654:	3a01      	subs	r2, #1
 8000656:	bf28      	it	cs
 8000658:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800065c:	d2ed      	bcs.n	800063a <__addsf3+0x92>
 800065e:	fab0 fc80 	clz	ip, r0
 8000662:	f1ac 0c08 	sub.w	ip, ip, #8
 8000666:	ebb2 020c 	subs.w	r2, r2, ip
 800066a:	fa00 f00c 	lsl.w	r0, r0, ip
 800066e:	bfaa      	itet	ge
 8000670:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000674:	4252      	neglt	r2, r2
 8000676:	4318      	orrge	r0, r3
 8000678:	bfbc      	itt	lt
 800067a:	40d0      	lsrlt	r0, r2
 800067c:	4318      	orrlt	r0, r3
 800067e:	4770      	bx	lr
 8000680:	f092 0f00 	teq	r2, #0
 8000684:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000688:	bf06      	itte	eq
 800068a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800068e:	3201      	addeq	r2, #1
 8000690:	3b01      	subne	r3, #1
 8000692:	e7b5      	b.n	8000600 <__addsf3+0x58>
 8000694:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000698:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800069c:	bf18      	it	ne
 800069e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006a2:	d021      	beq.n	80006e8 <__addsf3+0x140>
 80006a4:	ea92 0f03 	teq	r2, r3
 80006a8:	d004      	beq.n	80006b4 <__addsf3+0x10c>
 80006aa:	f092 0f00 	teq	r2, #0
 80006ae:	bf08      	it	eq
 80006b0:	4608      	moveq	r0, r1
 80006b2:	4770      	bx	lr
 80006b4:	ea90 0f01 	teq	r0, r1
 80006b8:	bf1c      	itt	ne
 80006ba:	2000      	movne	r0, #0
 80006bc:	4770      	bxne	lr
 80006be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80006c2:	d104      	bne.n	80006ce <__addsf3+0x126>
 80006c4:	0040      	lsls	r0, r0, #1
 80006c6:	bf28      	it	cs
 80006c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80006cc:	4770      	bx	lr
 80006ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80006d2:	bf3c      	itt	cc
 80006d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80006d8:	4770      	bxcc	lr
 80006da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80006e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006e6:	4770      	bx	lr
 80006e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006ec:	bf16      	itet	ne
 80006ee:	4608      	movne	r0, r1
 80006f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006f4:	4601      	movne	r1, r0
 80006f6:	0242      	lsls	r2, r0, #9
 80006f8:	bf06      	itte	eq
 80006fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006fe:	ea90 0f01 	teqeq	r0, r1
 8000702:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000706:	4770      	bx	lr

08000708 <__aeabi_ui2f>:
 8000708:	f04f 0300 	mov.w	r3, #0
 800070c:	e004      	b.n	8000718 <__aeabi_i2f+0x8>
 800070e:	bf00      	nop

08000710 <__aeabi_i2f>:
 8000710:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000714:	bf48      	it	mi
 8000716:	4240      	negmi	r0, r0
 8000718:	ea5f 0c00 	movs.w	ip, r0
 800071c:	bf08      	it	eq
 800071e:	4770      	bxeq	lr
 8000720:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000724:	4601      	mov	r1, r0
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	e01c      	b.n	8000766 <__aeabi_l2f+0x2a>

0800072c <__aeabi_ul2f>:
 800072c:	ea50 0201 	orrs.w	r2, r0, r1
 8000730:	bf08      	it	eq
 8000732:	4770      	bxeq	lr
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	e00a      	b.n	8000750 <__aeabi_l2f+0x14>
 800073a:	bf00      	nop

0800073c <__aeabi_l2f>:
 800073c:	ea50 0201 	orrs.w	r2, r0, r1
 8000740:	bf08      	it	eq
 8000742:	4770      	bxeq	lr
 8000744:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000748:	d502      	bpl.n	8000750 <__aeabi_l2f+0x14>
 800074a:	4240      	negs	r0, r0
 800074c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000750:	ea5f 0c01 	movs.w	ip, r1
 8000754:	bf02      	ittt	eq
 8000756:	4684      	moveq	ip, r0
 8000758:	4601      	moveq	r1, r0
 800075a:	2000      	moveq	r0, #0
 800075c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000760:	bf08      	it	eq
 8000762:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000766:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800076a:	fabc f28c 	clz	r2, ip
 800076e:	3a08      	subs	r2, #8
 8000770:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000774:	db10      	blt.n	8000798 <__aeabi_l2f+0x5c>
 8000776:	fa01 fc02 	lsl.w	ip, r1, r2
 800077a:	4463      	add	r3, ip
 800077c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000780:	f1c2 0220 	rsb	r2, r2, #32
 8000784:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000788:	fa20 f202 	lsr.w	r2, r0, r2
 800078c:	eb43 0002 	adc.w	r0, r3, r2
 8000790:	bf08      	it	eq
 8000792:	f020 0001 	biceq.w	r0, r0, #1
 8000796:	4770      	bx	lr
 8000798:	f102 0220 	add.w	r2, r2, #32
 800079c:	fa01 fc02 	lsl.w	ip, r1, r2
 80007a0:	f1c2 0220 	rsb	r2, r2, #32
 80007a4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80007a8:	fa21 f202 	lsr.w	r2, r1, r2
 80007ac:	eb43 0002 	adc.w	r0, r3, r2
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007b6:	4770      	bx	lr

080007b8 <__aeabi_fmul>:
 80007b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80007c0:	bf1e      	ittt	ne
 80007c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80007c6:	ea92 0f0c 	teqne	r2, ip
 80007ca:	ea93 0f0c 	teqne	r3, ip
 80007ce:	d06f      	beq.n	80008b0 <__aeabi_fmul+0xf8>
 80007d0:	441a      	add	r2, r3
 80007d2:	ea80 0c01 	eor.w	ip, r0, r1
 80007d6:	0240      	lsls	r0, r0, #9
 80007d8:	bf18      	it	ne
 80007da:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80007de:	d01e      	beq.n	800081e <__aeabi_fmul+0x66>
 80007e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80007e4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80007e8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80007ec:	fba0 3101 	umull	r3, r1, r0, r1
 80007f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80007f4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80007f8:	bf3e      	ittt	cc
 80007fa:	0049      	lslcc	r1, r1, #1
 80007fc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000800:	005b      	lslcc	r3, r3, #1
 8000802:	ea40 0001 	orr.w	r0, r0, r1
 8000806:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800080a:	2afd      	cmp	r2, #253	; 0xfd
 800080c:	d81d      	bhi.n	800084a <__aeabi_fmul+0x92>
 800080e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000812:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000816:	bf08      	it	eq
 8000818:	f020 0001 	biceq.w	r0, r0, #1
 800081c:	4770      	bx	lr
 800081e:	f090 0f00 	teq	r0, #0
 8000822:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000826:	bf08      	it	eq
 8000828:	0249      	lsleq	r1, r1, #9
 800082a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800082e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000832:	3a7f      	subs	r2, #127	; 0x7f
 8000834:	bfc2      	ittt	gt
 8000836:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800083a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800083e:	4770      	bxgt	lr
 8000840:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	3a01      	subs	r2, #1
 800084a:	dc5d      	bgt.n	8000908 <__aeabi_fmul+0x150>
 800084c:	f112 0f19 	cmn.w	r2, #25
 8000850:	bfdc      	itt	le
 8000852:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000856:	4770      	bxle	lr
 8000858:	f1c2 0200 	rsb	r2, r2, #0
 800085c:	0041      	lsls	r1, r0, #1
 800085e:	fa21 f102 	lsr.w	r1, r1, r2
 8000862:	f1c2 0220 	rsb	r2, r2, #32
 8000866:	fa00 fc02 	lsl.w	ip, r0, r2
 800086a:	ea5f 0031 	movs.w	r0, r1, rrx
 800086e:	f140 0000 	adc.w	r0, r0, #0
 8000872:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000876:	bf08      	it	eq
 8000878:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087c:	4770      	bx	lr
 800087e:	f092 0f00 	teq	r2, #0
 8000882:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000886:	bf02      	ittt	eq
 8000888:	0040      	lsleq	r0, r0, #1
 800088a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800088e:	3a01      	subeq	r2, #1
 8000890:	d0f9      	beq.n	8000886 <__aeabi_fmul+0xce>
 8000892:	ea40 000c 	orr.w	r0, r0, ip
 8000896:	f093 0f00 	teq	r3, #0
 800089a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800089e:	bf02      	ittt	eq
 80008a0:	0049      	lsleq	r1, r1, #1
 80008a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008a6:	3b01      	subeq	r3, #1
 80008a8:	d0f9      	beq.n	800089e <__aeabi_fmul+0xe6>
 80008aa:	ea41 010c 	orr.w	r1, r1, ip
 80008ae:	e78f      	b.n	80007d0 <__aeabi_fmul+0x18>
 80008b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80008b4:	ea92 0f0c 	teq	r2, ip
 80008b8:	bf18      	it	ne
 80008ba:	ea93 0f0c 	teqne	r3, ip
 80008be:	d00a      	beq.n	80008d6 <__aeabi_fmul+0x11e>
 80008c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80008c4:	bf18      	it	ne
 80008c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80008ca:	d1d8      	bne.n	800087e <__aeabi_fmul+0xc6>
 80008cc:	ea80 0001 	eor.w	r0, r0, r1
 80008d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80008d4:	4770      	bx	lr
 80008d6:	f090 0f00 	teq	r0, #0
 80008da:	bf17      	itett	ne
 80008dc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80008e0:	4608      	moveq	r0, r1
 80008e2:	f091 0f00 	teqne	r1, #0
 80008e6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80008ea:	d014      	beq.n	8000916 <__aeabi_fmul+0x15e>
 80008ec:	ea92 0f0c 	teq	r2, ip
 80008f0:	d101      	bne.n	80008f6 <__aeabi_fmul+0x13e>
 80008f2:	0242      	lsls	r2, r0, #9
 80008f4:	d10f      	bne.n	8000916 <__aeabi_fmul+0x15e>
 80008f6:	ea93 0f0c 	teq	r3, ip
 80008fa:	d103      	bne.n	8000904 <__aeabi_fmul+0x14c>
 80008fc:	024b      	lsls	r3, r1, #9
 80008fe:	bf18      	it	ne
 8000900:	4608      	movne	r0, r1
 8000902:	d108      	bne.n	8000916 <__aeabi_fmul+0x15e>
 8000904:	ea80 0001 	eor.w	r0, r0, r1
 8000908:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800090c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000910:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000914:	4770      	bx	lr
 8000916:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800091a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800091e:	4770      	bx	lr

08000920 <__aeabi_fdiv>:
 8000920:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000924:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000928:	bf1e      	ittt	ne
 800092a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800092e:	ea92 0f0c 	teqne	r2, ip
 8000932:	ea93 0f0c 	teqne	r3, ip
 8000936:	d069      	beq.n	8000a0c <__aeabi_fdiv+0xec>
 8000938:	eba2 0203 	sub.w	r2, r2, r3
 800093c:	ea80 0c01 	eor.w	ip, r0, r1
 8000940:	0249      	lsls	r1, r1, #9
 8000942:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000946:	d037      	beq.n	80009b8 <__aeabi_fdiv+0x98>
 8000948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800094c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000950:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000954:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000958:	428b      	cmp	r3, r1
 800095a:	bf38      	it	cc
 800095c:	005b      	lslcc	r3, r3, #1
 800095e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000962:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000966:	428b      	cmp	r3, r1
 8000968:	bf24      	itt	cs
 800096a:	1a5b      	subcs	r3, r3, r1
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000974:	bf24      	itt	cs
 8000976:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800097a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800097e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000982:	bf24      	itt	cs
 8000984:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000988:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800098c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000990:	bf24      	itt	cs
 8000992:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000996:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800099a:	011b      	lsls	r3, r3, #4
 800099c:	bf18      	it	ne
 800099e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009a2:	d1e0      	bne.n	8000966 <__aeabi_fdiv+0x46>
 80009a4:	2afd      	cmp	r2, #253	; 0xfd
 80009a6:	f63f af50 	bhi.w	800084a <__aeabi_fmul+0x92>
 80009aa:	428b      	cmp	r3, r1
 80009ac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80009bc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009c0:	327f      	adds	r2, #127	; 0x7f
 80009c2:	bfc2      	ittt	gt
 80009c4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009c8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009cc:	4770      	bxgt	lr
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f04f 0300 	mov.w	r3, #0
 80009d6:	3a01      	subs	r2, #1
 80009d8:	e737      	b.n	800084a <__aeabi_fmul+0x92>
 80009da:	f092 0f00 	teq	r2, #0
 80009de:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009e2:	bf02      	ittt	eq
 80009e4:	0040      	lsleq	r0, r0, #1
 80009e6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009ea:	3a01      	subeq	r2, #1
 80009ec:	d0f9      	beq.n	80009e2 <__aeabi_fdiv+0xc2>
 80009ee:	ea40 000c 	orr.w	r0, r0, ip
 80009f2:	f093 0f00 	teq	r3, #0
 80009f6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009fa:	bf02      	ittt	eq
 80009fc:	0049      	lsleq	r1, r1, #1
 80009fe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a02:	3b01      	subeq	r3, #1
 8000a04:	d0f9      	beq.n	80009fa <__aeabi_fdiv+0xda>
 8000a06:	ea41 010c 	orr.w	r1, r1, ip
 8000a0a:	e795      	b.n	8000938 <__aeabi_fdiv+0x18>
 8000a0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a10:	ea92 0f0c 	teq	r2, ip
 8000a14:	d108      	bne.n	8000a28 <__aeabi_fdiv+0x108>
 8000a16:	0242      	lsls	r2, r0, #9
 8000a18:	f47f af7d 	bne.w	8000916 <__aeabi_fmul+0x15e>
 8000a1c:	ea93 0f0c 	teq	r3, ip
 8000a20:	f47f af70 	bne.w	8000904 <__aeabi_fmul+0x14c>
 8000a24:	4608      	mov	r0, r1
 8000a26:	e776      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a28:	ea93 0f0c 	teq	r3, ip
 8000a2c:	d104      	bne.n	8000a38 <__aeabi_fdiv+0x118>
 8000a2e:	024b      	lsls	r3, r1, #9
 8000a30:	f43f af4c 	beq.w	80008cc <__aeabi_fmul+0x114>
 8000a34:	4608      	mov	r0, r1
 8000a36:	e76e      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a3c:	bf18      	it	ne
 8000a3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a42:	d1ca      	bne.n	80009da <__aeabi_fdiv+0xba>
 8000a44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000a48:	f47f af5c 	bne.w	8000904 <__aeabi_fmul+0x14c>
 8000a4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000a50:	f47f af3c 	bne.w	80008cc <__aeabi_fmul+0x114>
 8000a54:	e75f      	b.n	8000916 <__aeabi_fmul+0x15e>
 8000a56:	bf00      	nop

08000a58 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a6a:	4a19      	ldr	r2, [pc, #100]	; (8000ad0 <MX_ADC1_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_ADC1_Init+0x74>)
 8000a96:	f000 fc1f 	bl	80012d8 <HAL_ADC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 f93b 	bl	8000d1a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_ADC1_Init+0x74>)
 8000ab6:	f000 ff8b 	bl	80019d0 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ac0:	f000 f92b 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000084 	.word	0x20000084
 8000ad0:	40012400 	.word	0x40012400

08000ad4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_ADC_MspInit+0x7c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d129      	bne.n	8000b48 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_ADC_MspInit+0x80>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b24:	2301      	movs	r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_ADC_MspInit+0x84>)
 8000b34:	f001 fab2 	bl	800209c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2012      	movs	r0, #18
 8000b3e:	f001 fa76 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000b42:	2012      	movs	r0, #18
 8000b44:	f001 fa8f 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012400 	.word	0x40012400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b80:	f043 0320 	orr.w	r3, r3, #32
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0320 	and.w	r3, r3, #32
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b94:	699b      	ldr	r3, [r3, #24]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6193      	str	r3, [r2, #24]
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <MX_GPIO_Init+0x58>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    RetargetInit(&huart1);
 8000bbe:	4823      	ldr	r0, [pc, #140]	; (8000c4c <main+0x94>)
 8000bc0:	f000 f8b0 	bl	8000d24 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fb02 	bl	80011cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f84a 	bl	8000c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f7ff ffc6 	bl	8000b5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bd0:	f000 fa60 	bl	8001094 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000bd4:	f7ff ff40 	bl	8000a58 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000bd8:	f000 f9ea 	bl	8000fb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_ADCEx_Calibration_Start(&hadc1);
 8000bdc:	481c      	ldr	r0, [pc, #112]	; (8000c50 <main+0x98>)
 8000bde:	f001 f897 	bl	8001d10 <HAL_ADCEx_Calibration_Start>
    int32_t ADC_Value;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_ADC_Start(&hadc1);
 8000be2:	481b      	ldr	r0, [pc, #108]	; (8000c50 <main+0x98>)
 8000be4:	f000 fc62 	bl	80014ac <HAL_ADC_Start>
  while (1)
  {
      HAL_ADC_PollForConversion(&hadc1,50);
 8000be8:	2132      	movs	r1, #50	; 0x32
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <main+0x98>)
 8000bec:	f000 fd0c 	bl	8001608 <HAL_ADC_PollForConversion>

      if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1),HAL_ADC_STATE_REG_EOC))
 8000bf0:	4817      	ldr	r0, [pc, #92]	; (8000c50 <main+0x98>)
 8000bf2:	f000 ffe5 	bl	8001bc0 <HAL_ADC_GetState>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d01f      	beq.n	8000c40 <main+0x88>
      {
          ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000c00:	4813      	ldr	r0, [pc, #76]	; (8000c50 <main+0x98>)
 8000c02:	f000 fe07 	bl	8001814 <HAL_ADC_GetValue>
 8000c06:	4603      	mov	r3, r0
 8000c08:	607b      	str	r3, [r7, #4]
          printf("ADC1 Reading : %ld \r\n",ADC_Value);
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <main+0x9c>)
 8000c0e:	f003 f875 	bl	8003cfc <iprintf>
          printf("Voltage : %.4f \r\n", ADC_Value*3.3f/4096);
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fd7c 	bl	8000710 <__aeabi_i2f>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	490f      	ldr	r1, [pc, #60]	; (8000c58 <main+0xa0>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fdcb 	bl	80007b8 <__aeabi_fmul>
 8000c22:	4603      	mov	r3, r0
 8000c24:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe79 	bl	8000920 <__aeabi_fdiv>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fc5b 	bl	80004ec <__aeabi_f2d>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4808      	ldr	r0, [pc, #32]	; (8000c5c <main+0xa4>)
 8000c3c:	f003 f85e 	bl	8003cfc <iprintf>
      }

      HAL_Delay(1000);
 8000c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c44:	f000 fb24 	bl	8001290 <HAL_Delay>
      HAL_ADC_PollForConversion(&hadc1,50);
 8000c48:	e7ce      	b.n	8000be8 <main+0x30>
 8000c4a:	bf00      	nop
 8000c4c:	20000104 	.word	0x20000104
 8000c50:	20000084 	.word	0x20000084
 8000c54:	08004b78 	.word	0x08004b78
 8000c58:	40533333 	.word	0x40533333
 8000c5c:	08004b90 	.word	0x08004b90

08000c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b096      	sub	sp, #88	; 0x58
 8000c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c6a:	2228      	movs	r2, #40	; 0x28
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f003 f947 	bl	8003f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c94:	2301      	movs	r3, #1
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 fb82 	bl	80023c4 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cc6:	f000 f828 	bl	8000d1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cca:	230f      	movs	r3, #15
 8000ccc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000cd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 fdee 	bl	80028c8 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cf2:	f000 f812 	bl	8000d1a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4618      	mov	r0, r3
 8000d04:	f001 ff6e 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d0e:	f000 f804 	bl	8000d1a <Error_Handler>
  }
}
 8000d12:	bf00      	nop
 8000d14:	3758      	adds	r7, #88	; 0x58
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1e:	b672      	cpsid	i
}
 8000d20:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <Error_Handler+0x8>

08000d24 <RetargetInit>:
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    gHuart = huart;
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <RetargetInit+0x28>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
    /* Disable I/O buffering for STDOUT stream, so that
     * chars are sent out as soon as they are printed. */
    setvbuf(stdout, NULL, _IONBF, 0);
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <RetargetInit+0x2c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6898      	ldr	r0, [r3, #8]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f002 ffef 	bl	8003d20 <setvbuf>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000b4 	.word	0x200000b4
 8000d50:	20000064 	.word	0x20000064

08000d54 <_write>:
int _write(int fd, char *ptr, int len)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d002      	beq.n	8000d6c <_write+0x18>
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d111      	bne.n	8000d90 <_write+0x3c>
    {
        hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000d6c:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <_write+0x54>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	f04f 33ff 	mov.w	r3, #4294967295
 8000d78:	68b9      	ldr	r1, [r7, #8]
 8000d7a:	f002 fceb 	bl	8003754 <HAL_UART_Transmit>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000d82:	7dfb      	ldrb	r3, [r7, #23]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <_write+0x38>
            return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	e008      	b.n	8000d9e <_write+0x4a>
        else
            return EIO;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	e006      	b.n	8000d9e <_write+0x4a>
    }
    errno = EBADF;
 8000d90:	f003 f906 	bl	8003fa0 <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2209      	movs	r2, #9
 8000d98:	601a      	str	r2, [r3, #0]
    return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200000b4 	.word	0x200000b4

08000dac <_read>:

int _read(int fd, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;
    if (fd == STDIN_FILENO)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d110      	bne.n	8000de0 <_read+0x34>
    {
        hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <_read+0x4c>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	f002 fd46 	bl	800385a <HAL_UART_Receive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d101      	bne.n	8000ddc <_read+0x30>
            return 1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e008      	b.n	8000dee <_read+0x42>
        else
            return EIO;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	e006      	b.n	8000dee <_read+0x42>
    }
    errno = EBADF;
 8000de0:	f003 f8de 	bl	8003fa0 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2209      	movs	r2, #9
 8000de8:	601a      	str	r2, [r3, #0]
    return -1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000b4 	.word	0x200000b4

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_MspInit+0x60>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_MspInit+0x60>)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010000 	.word	0x40010000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr

08000e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f000 f9d7 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000eb4:	4802      	ldr	r0, [pc, #8]	; (8000ec0 <ADC1_2_IRQHandler+0x10>)
 8000eb6:	f000 fcb9 	bl	800182c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000084 	.word	0x20000084

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM2_IRQHandler+0x10>)
 8000eca:	f002 f868 	bl	8002f9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200000bc 	.word	0x200000bc

08000ed8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr

08000eee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <_isatty>:

int _isatty(int file)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f14:	2301      	movs	r3, #1
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d207      	bcs.n	8000f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f68:	f003 f81a 	bl	8003fa0 <__errno>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3718      	adds	r7, #24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	2000c000 	.word	0x2000c000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	200000b8 	.word	0x200000b8
 8000fa0:	200002a0 	.word	0x200002a0

08000fa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bc80      	pop	{r7}
 8000fae:	4770      	bx	lr

08000fb0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fd6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fe4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fe8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fea:	4b17      	ldr	r3, [pc, #92]	; (8001048 <MX_TIM2_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <MX_TIM2_Init+0x98>)
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ff6:	4814      	ldr	r0, [pc, #80]	; (8001048 <MX_TIM2_Init+0x98>)
 8000ff8:	f001 ff82 	bl	8002f00 <HAL_TIM_Base_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001002:	f7ff fe8a 	bl	8000d1a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM2_Init+0x98>)
 8001014:	f002 f8cb 	bl	80031ae <HAL_TIM_ConfigClockSource>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800101e:	f7ff fe7c 	bl	8000d1a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_TIM2_Init+0x98>)
 8001030:	f002 fac2 	bl	80035b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800103a:	f7ff fe6e 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000bc 	.word	0x200000bc

0800104c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800105c:	d113      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_TIM_Base_MspInit+0x44>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_TIM_Base_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_TIM_Base_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	201c      	movs	r0, #28
 800107c:	f000 ffd7 	bl	800202e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001080:	201c      	movs	r0, #28
 8001082:	f000 fff0 	bl	8002066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <MX_USART1_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART1_UART_Init+0x4c>)
 80010cc:	f002 faf2 	bl	80036b4 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f7ff fe20 	bl	8000d1a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000104 	.word	0x20000104
 80010e4:	40013800 	.word	0x40013800

080010e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_UART_MspInit+0x8c>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d131      	bne.n	800116c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_UART_MspInit+0x90>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_UART_MspInit+0x90>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_UART_MspInit+0x90>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	4619      	mov	r1, r3
 800114c:	480b      	ldr	r0, [pc, #44]	; (800117c <HAL_UART_MspInit+0x94>)
 800114e:	f000 ffa5 	bl	800209c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4619      	mov	r1, r3
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <HAL_UART_MspInit+0x94>)
 8001168:	f000 ff98 	bl	800209c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013800 	.word	0x40013800
 8001178:	40021000 	.word	0x40021000
 800117c:	40010800 	.word	0x40010800

08001180 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001180:	f7ff ff10 	bl	8000fa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001186:	490c      	ldr	r1, [pc, #48]	; (80011b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001188:	4a0c      	ldr	r2, [pc, #48]	; (80011bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800119c:	4c09      	ldr	r4, [pc, #36]	; (80011c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011aa:	f002 feff 	bl	8003fac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ae:	f7ff fd03 	bl	8000bb8 <main>
  bx lr
 80011b2:	4770      	bx	lr
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011bc:	08004c20 	.word	0x08004c20
  ldr r2, =_sbss
 80011c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011c4:	2000029c 	.word	0x2000029c

080011c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC3_IRQHandler>
	...

080011cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_Init+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_Init+0x28>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011dc:	2003      	movs	r0, #3
 80011de:	f000 ff1b 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e2:	200f      	movs	r0, #15
 80011e4:	f000 f808 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e8:	f7ff fe08 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 ff33 	bl	8002082 <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 fefb 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000000 	.word	0x20000000
 8001250:	20000008 	.word	0x20000008
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_IncTick+0x1c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <HAL_IncTick+0x20>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a03      	ldr	r2, [pc, #12]	; (8001278 <HAL_IncTick+0x20>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	20000008 	.word	0x20000008
 8001278:	2000014c 	.word	0x2000014c

0800127c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b02      	ldr	r3, [pc, #8]	; (800128c <HAL_GetTick+0x10>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	2000014c 	.word	0x2000014c

08001290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001298:	f7ff fff0 	bl	800127c <HAL_GetTick>
 800129c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d005      	beq.n	80012b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_Delay+0x44>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4413      	add	r3, r2
 80012b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b6:	bf00      	nop
 80012b8:	f7ff ffe0 	bl	800127c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8f7      	bhi.n	80012b8 <HAL_Delay+0x28>
  {
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000008 	.word	0x20000008

080012d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0ce      	b.n	8001498 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	2b00      	cmp	r3, #0
 8001306:	d109      	bne.n	800131c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fbdc 	bl	8000ad4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fcb5 	bl	8001c8c <ADC_ConversionStop_Disable>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	2b00      	cmp	r3, #0
 8001330:	f040 80a9 	bne.w	8001486 <HAL_ADC_Init+0x1ae>
 8001334:	7dfb      	ldrb	r3, [r7, #23]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 80a5 	bne.w	8001486 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001344:	f023 0302 	bic.w	r3, r3, #2
 8001348:	f043 0202 	orr.w	r2, r3, #2
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4951      	ldr	r1, [pc, #324]	; (80014a0 <HAL_ADC_Init+0x1c8>)
 800135a:	428b      	cmp	r3, r1
 800135c:	d10a      	bne.n	8001374 <HAL_ADC_Init+0x9c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001366:	d002      	beq.n	800136e <HAL_ADC_Init+0x96>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	e004      	b.n	8001378 <HAL_ADC_Init+0xa0>
 800136e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001372:	e001      	b.n	8001378 <HAL_ADC_Init+0xa0>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001378:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7b1b      	ldrb	r3, [r3, #12]
 800137e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001380:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4313      	orrs	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001390:	d003      	beq.n	800139a <HAL_ADC_Init+0xc2>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d102      	bne.n	80013a0 <HAL_ADC_Init+0xc8>
 800139a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800139e:	e000      	b.n	80013a2 <HAL_ADC_Init+0xca>
 80013a0:	2300      	movs	r3, #0
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7d1b      	ldrb	r3, [r3, #20]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d119      	bne.n	80013e4 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	7b1b      	ldrb	r3, [r3, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d109      	bne.n	80013cc <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	3b01      	subs	r3, #1
 80013be:	035a      	lsls	r2, r3, #13
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	e00b      	b.n	80013e4 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f043 0220 	orr.w	r2, r3, #32
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689a      	ldr	r2, [r3, #8]
 80013fe:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_ADC_Init+0x1cc>)
 8001400:	4013      	ands	r3, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	430b      	orrs	r3, r1
 800140a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001414:	d003      	beq.n	800141e <HAL_ADC_Init+0x146>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d104      	bne.n	8001428 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	3b01      	subs	r3, #1
 8001424:	051b      	lsls	r3, r3, #20
 8001426:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	430a      	orrs	r2, r1
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <HAL_ADC_Init+0x1d0>)
 8001444:	4013      	ands	r3, r2
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	429a      	cmp	r2, r3
 800144a:	d10b      	bne.n	8001464 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f023 0303 	bic.w	r3, r3, #3
 800145a:	f043 0201 	orr.w	r2, r3, #1
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001462:	e018      	b.n	8001496 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f023 0312 	bic.w	r3, r3, #18
 800146c:	f043 0210 	orr.w	r2, r3, #16
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001484:	e007      	b.n	8001496 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	f043 0210 	orr.w	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001496:	7dfb      	ldrb	r3, [r7, #23]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40013c00 	.word	0x40013c00
 80014a4:	ffe1f7fd 	.word	0xffe1f7fd
 80014a8:	ff1f0efe 	.word	0xff1f0efe

080014ac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Start+0x1a>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e098      	b.n	80015f8 <HAL_ADC_Start+0x14c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fb82 	bl	8001bd8 <ADC_Enable>
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 8087 	bne.w	80015ee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a41      	ldr	r2, [pc, #260]	; (8001600 <HAL_ADC_Start+0x154>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d105      	bne.n	800150a <HAL_ADC_Start+0x5e>
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_ADC_Start+0x158>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d026      	beq.n	8001572 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800152c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001534:	e01d      	b.n	8001572 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_ADC_Start+0x158>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d004      	beq.n	8001556 <HAL_ADC_Start+0xaa>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <HAL_ADC_Start+0x154>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10d      	bne.n	8001572 <HAL_ADC_Start+0xc6>
 8001556:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_ADC_Start+0x158>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001566:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800156a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d006      	beq.n	800158c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001582:	f023 0206 	bic.w	r2, r3, #6
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	62da      	str	r2, [r3, #44]	; 0x2c
 800158a:	e002      	b.n	8001592 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f06f 0202 	mvn.w	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015b2:	d113      	bne.n	80015dc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <HAL_ADC_Start+0x154>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d105      	bne.n	80015ca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_ADC_Start+0x158>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d108      	bne.n	80015dc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	e00c      	b.n	80015f6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689a      	ldr	r2, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	e003      	b.n	80015f6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40012800 	.word	0x40012800
 8001604:	40012400 	.word	0x40012400

08001608 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800161e:	f7ff fe2d 	bl	800127c <HAL_GetTick>
 8001622:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d00b      	beq.n	800164a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f043 0220 	orr.w	r2, r3, #32
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0d3      	b.n	80017f2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d131      	bne.n	80016bc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d12a      	bne.n	80016bc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001666:	e021      	b.n	80016ac <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166e:	d01d      	beq.n	80016ac <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d007      	beq.n	8001686 <HAL_ADC_PollForConversion+0x7e>
 8001676:	f7ff fe01 	bl	800127c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d212      	bcs.n	80016ac <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10b      	bne.n	80016ac <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	f043 0204 	orr.w	r2, r3, #4
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0a2      	b.n	80017f2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0d6      	beq.n	8001668 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016ba:	e070      	b.n	800179e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016bc:	4b4f      	ldr	r3, [pc, #316]	; (80017fc <HAL_ADC_PollForConversion+0x1f4>)
 80016be:	681c      	ldr	r4, [r3, #0]
 80016c0:	2002      	movs	r0, #2
 80016c2:	f001 fb45 	bl	8002d50 <HAL_RCCEx_GetPeriphCLKFreq>
 80016c6:	4603      	mov	r3, r0
 80016c8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6919      	ldr	r1, [r3, #16]
 80016d2:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_ADC_PollForConversion+0x1f8>)
 80016d4:	400b      	ands	r3, r1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_ADC_PollForConversion+0x104>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68d9      	ldr	r1, [r3, #12]
 80016e0:	4b48      	ldr	r3, [pc, #288]	; (8001804 <HAL_ADC_PollForConversion+0x1fc>)
 80016e2:	400b      	ands	r3, r1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d111      	bne.n	800170c <HAL_ADC_PollForConversion+0x104>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6919      	ldr	r1, [r3, #16]
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_ADC_PollForConversion+0x200>)
 80016f0:	400b      	ands	r3, r1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_ADC_PollForConversion+0x100>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_ADC_PollForConversion+0x204>)
 80016fe:	400b      	ands	r3, r1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_ADC_PollForConversion+0x100>
 8001704:	2314      	movs	r3, #20
 8001706:	e020      	b.n	800174a <HAL_ADC_PollForConversion+0x142>
 8001708:	2329      	movs	r3, #41	; 0x29
 800170a:	e01e      	b.n	800174a <HAL_ADC_PollForConversion+0x142>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_ADC_PollForConversion+0x200>)
 8001714:	400b      	ands	r3, r1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d106      	bne.n	8001728 <HAL_ADC_PollForConversion+0x120>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_ADC_PollForConversion+0x204>)
 8001722:	400b      	ands	r3, r1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00d      	beq.n	8001744 <HAL_ADC_PollForConversion+0x13c>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_ADC_PollForConversion+0x208>)
 8001730:	400b      	ands	r3, r1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_ADC_PollForConversion+0x140>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68d9      	ldr	r1, [r3, #12]
 800173c:	4b34      	ldr	r3, [pc, #208]	; (8001810 <HAL_ADC_PollForConversion+0x208>)
 800173e:	400b      	ands	r3, r1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_PollForConversion+0x140>
 8001744:	2354      	movs	r3, #84	; 0x54
 8001746:	e000      	b.n	800174a <HAL_ADC_PollForConversion+0x142>
 8001748:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800174a:	fb02 f303 	mul.w	r3, r2, r3
 800174e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001750:	e021      	b.n	8001796 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d01a      	beq.n	8001790 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d007      	beq.n	8001770 <HAL_ADC_PollForConversion+0x168>
 8001760:	f7ff fd8c 	bl	800127c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d20f      	bcs.n	8001790 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	429a      	cmp	r2, r3
 8001776:	d90b      	bls.n	8001790 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	f043 0204 	orr.w	r2, r3, #4
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e030      	b.n	80017f2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	429a      	cmp	r2, r3
 800179c:	d8d9      	bhi.n	8001752 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f06f 0212 	mvn.w	r2, #18
 80017a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017c2:	d115      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000000 	.word	0x20000000
 8001800:	24924924 	.word	0x24924924
 8001804:	00924924 	.word	0x00924924
 8001808:	12492492 	.word	0x12492492
 800180c:	00492492 	.word	0x00492492
 8001810:	00249249 	.word	0x00249249

08001814 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d03e      	beq.n	80018cc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d039      	beq.n	80018cc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800187a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800187e:	d11d      	bne.n	80018bc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001884:	2b00      	cmp	r3, #0
 8001886:	d119      	bne.n	80018bc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 0220 	bic.w	r2, r2, #32
 8001896:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f874 	bl	80019aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f06f 0212 	mvn.w	r2, #18
 80018ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d04d      	beq.n	8001972 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d048      	beq.n	8001972 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d105      	bne.n	80018f8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001902:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001906:	d012      	beq.n	800192e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001912:	2b00      	cmp	r3, #0
 8001914:	d125      	bne.n	8001962 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001920:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001924:	d11d      	bne.n	8001962 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800192a:	2b00      	cmp	r3, #0
 800192c:	d119      	bne.n	8001962 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001952:	2b00      	cmp	r3, #0
 8001954:	d105      	bne.n	8001962 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f043 0201 	orr.w	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 fa82 	bl	8001e6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f06f 020c 	mvn.w	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001978:	2b00      	cmp	r3, #0
 800197a:	d012      	beq.n	80019a2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f812 	bl	80019bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0201 	mvn.w	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x20>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e0dc      	b.n	8001baa <HAL_ADC_ConfigChannel+0x1da>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b06      	cmp	r3, #6
 80019fe:	d81c      	bhi.n	8001a3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3b05      	subs	r3, #5
 8001a12:	221f      	movs	r2, #31
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4019      	ands	r1, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b05      	subs	r3, #5
 8001a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	635a      	str	r2, [r3, #52]	; 0x34
 8001a38:	e03c      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d81c      	bhi.n	8001a7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3b23      	subs	r3, #35	; 0x23
 8001a54:	221f      	movs	r2, #31
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4019      	ands	r1, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3b23      	subs	r3, #35	; 0x23
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	e01b      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b41      	subs	r3, #65	; 0x41
 8001a8e:	221f      	movs	r2, #31
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3b41      	subs	r3, #65	; 0x41
 8001aa8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d91c      	bls.n	8001af6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68d9      	ldr	r1, [r3, #12]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	2207      	movs	r2, #7
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6898      	ldr	r0, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b1e      	subs	r3, #30
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	e019      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6919      	ldr	r1, [r3, #16]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	2207      	movs	r2, #7
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	4019      	ands	r1, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6898      	ldr	r0, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d003      	beq.n	8001b3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b36:	2b11      	cmp	r3, #17
 8001b38:	d132      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d125      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d126      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d11a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a13      	ldr	r2, [pc, #76]	; (8001bbc <HAL_ADC_ConfigChannel+0x1ec>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	0c9a      	lsrs	r2, r3, #18
 8001b76:	4613      	mov	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x1b2>
 8001b8e:	e007      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	40012400 	.word	0x40012400
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	431bde83 	.word	0x431bde83

08001bc0 <HAL_ADC_GetState>:
  * @brief  return the ADC state
  * @param  hadc: ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
	...

08001bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d040      	beq.n	8001c78 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f042 0201 	orr.w	r2, r2, #1
 8001c04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c06:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <ADC_Enable+0xac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <ADC_Enable+0xb0>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c14:	e002      	b.n	8001c1c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c22:	f7ff fb2b 	bl	800127c <HAL_GetTick>
 8001c26:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c28:	e01f      	b.n	8001c6a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c2a:	f7ff fb27 	bl	800127c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d918      	bls.n	8001c6a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d011      	beq.n	8001c6a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c56:	f043 0201 	orr.w	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e007      	b.n	8001c7a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d1d8      	bne.n	8001c2a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12e      	bne.n	8001d04 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 0201 	bic.w	r2, r2, #1
 8001cb4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cb6:	f7ff fae1 	bl	800127c <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cbc:	e01b      	b.n	8001cf6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001cbe:	f7ff fadd 	bl	800127c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d914      	bls.n	8001cf6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10d      	bne.n	8001cf6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	f043 0210 	orr.w	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cea:	f043 0201 	orr.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e007      	b.n	8001d06 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d0dc      	beq.n	8001cbe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADCEx_Calibration_Start+0x1e>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e097      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa8 	bl	8001c8c <ADC_ConversionStop_Disable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff49 	bl	8001bd8 <ADC_Enable>
 8001d46:	4603      	mov	r3, r0
 8001d48:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001d4a:	7dfb      	ldrb	r3, [r7, #23]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f040 8081 	bne.w	8001e54 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d5a:	f023 0302 	bic.w	r3, r3, #2
 8001d5e:	f043 0202 	orr.w	r2, r3, #2
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <HAL_ADCEx_Calibration_Start+0x158>)
 8001d68:	681c      	ldr	r4, [r3, #0]
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f000 fff0 	bl	8002d50 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d70:	4603      	mov	r3, r0
 8001d72:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001d76:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001d78:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001d7a:	e002      	b.n	8001d82 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0208 	orr.w	r2, r2, #8
 8001d96:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d98:	f7ff fa70 	bl	800127c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001d9e:	e01b      	b.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001da0:	f7ff fa6c 	bl	800127c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d914      	bls.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f023 0312 	bic.w	r3, r3, #18
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e042      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1dc      	bne.n	8001da0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0204 	orr.w	r2, r2, #4
 8001df4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001df6:	f7ff fa41 	bl	800127c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001dfc:	e01b      	b.n	8001e36 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001dfe:	f7ff fa3d 	bl	800127c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b0a      	cmp	r3, #10
 8001e0a:	d914      	bls.n	8001e36 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00d      	beq.n	8001e36 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	f023 0312 	bic.w	r3, r3, #18
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e013      	b.n	8001e5e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1dc      	bne.n	8001dfe <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0201 	orr.w	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
	...

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4906      	ldr	r1, [pc, #24]	; (8001f18 <__NVIC_EnableIRQ+0x34>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	db0a      	blt.n	8001f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	490c      	ldr	r1, [pc, #48]	; (8001f68 <__NVIC_SetPriority+0x4c>)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f44:	e00a      	b.n	8001f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4908      	ldr	r1, [pc, #32]	; (8001f6c <__NVIC_SetPriority+0x50>)
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	3b04      	subs	r3, #4
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	440b      	add	r3, r1
 8001f5a:	761a      	strb	r2, [r3, #24]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b089      	sub	sp, #36	; 0x24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f1c3 0307 	rsb	r3, r3, #7
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	bf28      	it	cs
 8001f8e:	2304      	movcs	r3, #4
 8001f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3304      	adds	r3, #4
 8001f96:	2b06      	cmp	r3, #6
 8001f98:	d902      	bls.n	8001fa0 <NVIC_EncodePriority+0x30>
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3b03      	subs	r3, #3
 8001f9e:	e000      	b.n	8001fa2 <NVIC_EncodePriority+0x32>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	43d9      	mvns	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc8:	4313      	orrs	r3, r2
         );
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff90 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff2d 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff42 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff90 	bl	8001f70 <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5f 	bl	8001f1c <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff35 	bl	8001ee4 <__NVIC_EnableIRQ>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ffa2 	bl	8001fd4 <SysTick_Config>
 8002090:	4603      	mov	r3, r0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800209c:	b480      	push	{r7}
 800209e:	b08b      	sub	sp, #44	; 0x2c
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ae:	e179      	b.n	80023a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020b0:	2201      	movs	r2, #1
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	f040 8168 	bne.w	800239e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4a96      	ldr	r2, [pc, #600]	; (800232c <HAL_GPIO_Init+0x290>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d05e      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020d8:	4a94      	ldr	r2, [pc, #592]	; (800232c <HAL_GPIO_Init+0x290>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d875      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020de:	4a94      	ldr	r2, [pc, #592]	; (8002330 <HAL_GPIO_Init+0x294>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d058      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020e4:	4a92      	ldr	r2, [pc, #584]	; (8002330 <HAL_GPIO_Init+0x294>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d86f      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020ea:	4a92      	ldr	r2, [pc, #584]	; (8002334 <HAL_GPIO_Init+0x298>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d052      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020f0:	4a90      	ldr	r2, [pc, #576]	; (8002334 <HAL_GPIO_Init+0x298>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d869      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 80020f6:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_GPIO_Init+0x29c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d04c      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 80020fc:	4a8e      	ldr	r2, [pc, #568]	; (8002338 <HAL_GPIO_Init+0x29c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d863      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 8002102:	4a8e      	ldr	r2, [pc, #568]	; (800233c <HAL_GPIO_Init+0x2a0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d046      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
 8002108:	4a8c      	ldr	r2, [pc, #560]	; (800233c <HAL_GPIO_Init+0x2a0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d85d      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 800210e:	2b12      	cmp	r3, #18
 8002110:	d82a      	bhi.n	8002168 <HAL_GPIO_Init+0xcc>
 8002112:	2b12      	cmp	r3, #18
 8002114:	d859      	bhi.n	80021ca <HAL_GPIO_Init+0x12e>
 8002116:	a201      	add	r2, pc, #4	; (adr r2, 800211c <HAL_GPIO_Init+0x80>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002197 	.word	0x08002197
 8002120:	08002171 	.word	0x08002171
 8002124:	08002183 	.word	0x08002183
 8002128:	080021c5 	.word	0x080021c5
 800212c:	080021cb 	.word	0x080021cb
 8002130:	080021cb 	.word	0x080021cb
 8002134:	080021cb 	.word	0x080021cb
 8002138:	080021cb 	.word	0x080021cb
 800213c:	080021cb 	.word	0x080021cb
 8002140:	080021cb 	.word	0x080021cb
 8002144:	080021cb 	.word	0x080021cb
 8002148:	080021cb 	.word	0x080021cb
 800214c:	080021cb 	.word	0x080021cb
 8002150:	080021cb 	.word	0x080021cb
 8002154:	080021cb 	.word	0x080021cb
 8002158:	080021cb 	.word	0x080021cb
 800215c:	080021cb 	.word	0x080021cb
 8002160:	08002179 	.word	0x08002179
 8002164:	0800218d 	.word	0x0800218d
 8002168:	4a75      	ldr	r2, [pc, #468]	; (8002340 <HAL_GPIO_Init+0x2a4>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d013      	beq.n	8002196 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800216e:	e02c      	b.n	80021ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e029      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	3304      	adds	r3, #4
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e024      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	3308      	adds	r3, #8
 8002188:	623b      	str	r3, [r7, #32]
          break;
 800218a:	e01f      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	330c      	adds	r3, #12
 8002192:	623b      	str	r3, [r7, #32]
          break;
 8002194:	e01a      	b.n	80021cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800219e:	2304      	movs	r3, #4
 80021a0:	623b      	str	r3, [r7, #32]
          break;
 80021a2:	e013      	b.n	80021cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021ac:	2308      	movs	r3, #8
 80021ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	611a      	str	r2, [r3, #16]
          break;
 80021b6:	e009      	b.n	80021cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	615a      	str	r2, [r3, #20]
          break;
 80021c2:	e003      	b.n	80021cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
          break;
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x130>
          break;
 80021ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d801      	bhi.n	80021d6 <HAL_GPIO_Init+0x13a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e001      	b.n	80021da <HAL_GPIO_Init+0x13e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3304      	adds	r3, #4
 80021da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2bff      	cmp	r3, #255	; 0xff
 80021e0:	d802      	bhi.n	80021e8 <HAL_GPIO_Init+0x14c>
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x152>
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3b08      	subs	r3, #8
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	210f      	movs	r1, #15
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	401a      	ands	r2, r3
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80c1 	beq.w	800239e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800221c:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_GPIO_Init+0x2a8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_GPIO_Init+0x2a8>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_GPIO_Init+0x2a8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002234:	4a44      	ldr	r2, [pc, #272]	; (8002348 <HAL_GPIO_Init+0x2ac>)
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	3302      	adds	r3, #2
 800223c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002240:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3c      	ldr	r2, [pc, #240]	; (800234c <HAL_GPIO_Init+0x2b0>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01f      	beq.n	80022a0 <HAL_GPIO_Init+0x204>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <HAL_GPIO_Init+0x2b4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d019      	beq.n	800229c <HAL_GPIO_Init+0x200>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <HAL_GPIO_Init+0x2b8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d013      	beq.n	8002298 <HAL_GPIO_Init+0x1fc>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a39      	ldr	r2, [pc, #228]	; (8002358 <HAL_GPIO_Init+0x2bc>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00d      	beq.n	8002294 <HAL_GPIO_Init+0x1f8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a38      	ldr	r2, [pc, #224]	; (800235c <HAL_GPIO_Init+0x2c0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d007      	beq.n	8002290 <HAL_GPIO_Init+0x1f4>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a37      	ldr	r2, [pc, #220]	; (8002360 <HAL_GPIO_Init+0x2c4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_GPIO_Init+0x1f0>
 8002288:	2305      	movs	r3, #5
 800228a:	e00a      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 800228c:	2306      	movs	r3, #6
 800228e:	e008      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 8002290:	2304      	movs	r3, #4
 8002292:	e006      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 8002294:	2303      	movs	r3, #3
 8002296:	e004      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 8002298:	2302      	movs	r3, #2
 800229a:	e002      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <HAL_GPIO_Init+0x206>
 80022a0:	2300      	movs	r3, #0
 80022a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a4:	f002 0203 	and.w	r2, r2, #3
 80022a8:	0092      	lsls	r2, r2, #2
 80022aa:	4093      	lsls	r3, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b2:	4925      	ldr	r1, [pc, #148]	; (8002348 <HAL_GPIO_Init+0x2ac>)
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d006      	beq.n	80022da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4924      	ldr	r1, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022da:	4b22      	ldr	r3, [pc, #136]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	4920      	ldr	r1, [pc, #128]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f4:	4b1b      	ldr	r3, [pc, #108]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60cb      	str	r3, [r1, #12]
 8002300:	e006      	b.n	8002310 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	43db      	mvns	r3, r3
 800230a:	4916      	ldr	r1, [pc, #88]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 800230c:	4013      	ands	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d025      	beq.n	8002368 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4910      	ldr	r1, [pc, #64]	; (8002364 <HAL_GPIO_Init+0x2c8>)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	e025      	b.n	8002376 <HAL_GPIO_Init+0x2da>
 800232a:	bf00      	nop
 800232c:	10320000 	.word	0x10320000
 8002330:	10310000 	.word	0x10310000
 8002334:	10220000 	.word	0x10220000
 8002338:	10210000 	.word	0x10210000
 800233c:	10120000 	.word	0x10120000
 8002340:	10110000 	.word	0x10110000
 8002344:	40021000 	.word	0x40021000
 8002348:	40010000 	.word	0x40010000
 800234c:	40010800 	.word	0x40010800
 8002350:	40010c00 	.word	0x40010c00
 8002354:	40011000 	.word	0x40011000
 8002358:	40011400 	.word	0x40011400
 800235c:	40011800 	.word	0x40011800
 8002360:	40011c00 	.word	0x40011c00
 8002364:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	43db      	mvns	r3, r3
 8002370:	4913      	ldr	r1, [pc, #76]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002372:	4013      	ands	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d006      	beq.n	8002390 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	490e      	ldr	r1, [pc, #56]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]
 800238e:	e006      	b.n	800239e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_GPIO_Init+0x324>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	43db      	mvns	r3, r3
 8002398:	4909      	ldr	r1, [pc, #36]	; (80023c0 <HAL_GPIO_Init+0x324>)
 800239a:	4013      	ands	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3301      	adds	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	fa22 f303 	lsr.w	r3, r2, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f47f ae7e 	bne.w	80020b0 <HAL_GPIO_Init+0x14>
  }
}
 80023b4:	bf00      	nop
 80023b6:	bf00      	nop
 80023b8:	372c      	adds	r7, #44	; 0x2c
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40010400 	.word	0x40010400

080023c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e272      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 8087 	beq.w	80024f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d00c      	beq.n	800240a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d112      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
 80023fc:	4b8c      	ldr	r3, [pc, #560]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d10b      	bne.n	8002422 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800240a:	4b89      	ldr	r3, [pc, #548]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d06c      	beq.n	80024f0 <HAL_RCC_OscConfig+0x12c>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d168      	bne.n	80024f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e24c      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x76>
 800242c:	4b80      	ldr	r3, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a7f      	ldr	r2, [pc, #508]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e02e      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <HAL_RCC_OscConfig+0x98>
 8002442:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7a      	ldr	r2, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002454:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0xbc>
 8002466:	4b72      	ldr	r3, [pc, #456]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b6f      	ldr	r3, [pc, #444]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0xd4>
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6a      	ldr	r2, [pc, #424]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a67      	ldr	r2, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d013      	beq.n	80024c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe feec 	bl	800127c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a8:	f7fe fee8 	bl	800127c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e200      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b5d      	ldr	r3, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCC_OscConfig+0xe4>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c8:	f7fe fed8 	bl	800127c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d0:	f7fe fed4 	bl	800127c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e1ec      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x10c>
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d063      	beq.n	80025c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fe:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b08      	cmp	r3, #8
 8002514:	d11c      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b43      	ldr	r3, [pc, #268]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d005      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e1c0      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4939      	ldr	r1, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	e03a      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d020      	beq.n	800259a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002558:	4b36      	ldr	r3, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800255a:	2201      	movs	r2, #1
 800255c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255e:	f7fe fe8d 	bl	800127c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fe89 	bl	800127c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e1a1      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4927      	ldr	r1, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	e015      	b.n	80025c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_RCC_OscConfig+0x270>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fe6c 	bl	800127c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a8:	f7fe fe68 	bl	800127c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e180      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03a      	beq.n	8002648 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d019      	beq.n	800260e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fe4c 	bl	800127c <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e8:	f7fe fe48 	bl	800127c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e160      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f000 face 	bl	8002ba8 <RCC_Delay>
 800260c:	e01c      	b.n	8002648 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_OscConfig+0x274>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7fe fe32 	bl	800127c <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261a:	e00f      	b.n	800263c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe fe2e 	bl	800127c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d908      	bls.n	800263c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e146      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	42420000 	.word	0x42420000
 8002638:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800263c:	4b92      	ldr	r3, [pc, #584]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1e9      	bne.n	800261c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80a6 	beq.w	80027a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10d      	bne.n	8002682 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002666:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4a87      	ldr	r2, [pc, #540]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800266c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002670:	61d3      	str	r3, [r2, #28]
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b82      	ldr	r3, [pc, #520]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d118      	bne.n	80026c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268e:	4b7f      	ldr	r3, [pc, #508]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7e      	ldr	r2, [pc, #504]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269a:	f7fe fdef 	bl	800127c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a2:	f7fe fdeb 	bl	800127c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b64      	cmp	r3, #100	; 0x64
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e103      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b4:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4c8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x312>
 80026c8:	4b6f      	ldr	r3, [pc, #444]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a6e      	ldr	r2, [pc, #440]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e02d      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x334>
 80026de:	4b6a      	ldr	r3, [pc, #424]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a69      	ldr	r2, [pc, #420]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	f023 0301 	bic.w	r3, r3, #1
 80026e8:	6213      	str	r3, [r2, #32]
 80026ea:	4b67      	ldr	r3, [pc, #412]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a66      	ldr	r2, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 0304 	bic.w	r3, r3, #4
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	e01c      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d10c      	bne.n	800271a <HAL_RCC_OscConfig+0x356>
 8002700:	4b61      	ldr	r3, [pc, #388]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a60      	ldr	r2, [pc, #384]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0304 	orr.w	r3, r3, #4
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a5d      	ldr	r2, [pc, #372]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	6213      	str	r3, [r2, #32]
 8002718:	e00b      	b.n	8002732 <HAL_RCC_OscConfig+0x36e>
 800271a:	4b5b      	ldr	r3, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	6213      	str	r3, [r2, #32]
 8002726:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	6a1b      	ldr	r3, [r3, #32]
 800272a:	4a57      	ldr	r2, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	f023 0304 	bic.w	r3, r3, #4
 8002730:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d015      	beq.n	8002766 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800273a:	f7fe fd9f 	bl	800127c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe fd9b 	bl	800127c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e0b1      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ee      	beq.n	8002742 <HAL_RCC_OscConfig+0x37e>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe fd89 	bl	800127c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe fd85 	bl	800127c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	; 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e09b      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002784:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ee      	bne.n	800276e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002790:	7dfb      	ldrb	r3, [r7, #23]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 8087 	beq.w	80028ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b36      	ldr	r3, [pc, #216]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d061      	beq.n	800287c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d146      	bne.n	800284e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c0:	4b33      	ldr	r3, [pc, #204]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c6:	f7fe fd59 	bl	800127c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ce:	f7fe fd55 	bl	800127c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e06d      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f6:	4b24      	ldr	r3, [pc, #144]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4921      	ldr	r1, [pc, #132]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a19      	ldr	r1, [r3, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	430b      	orrs	r3, r1
 800281a:	491b      	ldr	r1, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe fd29 	bl	800127c <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe fd25 	bl	800127c <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e03d      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x46a>
 800284c:	e035      	b.n	80028ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_OscConfig+0x4cc>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe fd12 	bl	800127c <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fd0e 	bl	800127c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e026      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x498>
 800287a:	e01e      	b.n	80028ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e019      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
 8002890:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_OscConfig+0x500>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d0      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b6a      	ldr	r3, [pc, #424]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b67      	ldr	r3, [pc, #412]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	4965      	ldr	r1, [pc, #404]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0b8      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002924:	4b59      	ldr	r3, [pc, #356]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	4a58      	ldr	r2, [pc, #352]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800293c:	4b53      	ldr	r3, [pc, #332]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002946:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	494d      	ldr	r1, [pc, #308]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d040      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d107      	bne.n	800297e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d115      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e07f      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e073      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06b      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b39      	ldr	r3, [pc, #228]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4936      	ldr	r1, [pc, #216]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fc60 	bl	800127c <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fc5c 	bl	800127c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e053      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2d      	ldr	r3, [pc, #180]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d210      	bcs.n	8002a18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 0207 	bic.w	r2, r3, #7
 80029fe:	4922      	ldr	r1, [pc, #136]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b20      	ldr	r3, [pc, #128]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e032      	b.n	8002a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d009      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a56:	f000 f821 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	490a      	ldr	r1, [pc, #40]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	5ccb      	ldrb	r3, [r1, r3]
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1cc>)
 8002a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_RCC_ClockConfig+0x1d0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fbbe 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08004ba4 	.word	0x08004ba4
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d002      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x30>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aca:	e027      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e027      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	0c5b      	lsrs	r3, r3, #17
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002af6:	5cd3      	ldrb	r3, [r2, r3]
 8002af8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afe:	fb03 f202 	mul.w	r2, r3, r2
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	e004      	b.n	8002b16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	613b      	str	r3, [r7, #16]
      break;
 8002b1a:	e002      	b.n	8002b22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1e:	613b      	str	r3, [r7, #16]
      break;
 8002b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b22:	693b      	ldr	r3, [r7, #16]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	08004bbc 	.word	0x08004bbc
 8002b3c:	08004bcc 	.word	0x08004bcc
 8002b40:	003d0900 	.word	0x003d0900

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	20000000 	.word	0x20000000

08002b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	f7ff fff2 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	0a1b      	lsrs	r3, r3, #8
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08004bb4 	.word	0x08004bb4

08002b80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b84:	f7ff ffde 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0adb      	lsrs	r3, r3, #11
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4903      	ldr	r1, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b96:	5ccb      	ldrb	r3, [r1, r3]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08004bb4 	.word	0x08004bb4

08002ba8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	; (8002bdc <RCC_Delay+0x34>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a0a      	ldr	r2, [pc, #40]	; (8002be0 <RCC_Delay+0x38>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bc4:	bf00      	nop
  }
  while (Delay --);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f9      	bne.n	8002bc4 <RCC_Delay+0x1c>
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d07d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c04:	4b4f      	ldr	r3, [pc, #316]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a4b      	ldr	r2, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
 8002c1c:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2c:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d118      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a42      	ldr	r2, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c44:	f7fe fb1a 	bl	800127c <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4a:	e008      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4c:	f7fe fb16 	bl	800127c <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e06d      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b3a      	ldr	r3, [pc, #232]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d02e      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d027      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c98:	4b2c      	ldr	r3, [pc, #176]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c9e:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d014      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe fae5 	bl	800127c <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fae1 	bl	800127c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e036      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ccc:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ee      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4917      	ldr	r1, [pc, #92]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d08:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	490b      	ldr	r1, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42420440 	.word	0x42420440

08002d50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	f200 80af 	bhi.w	8002ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002e53 	.word	0x08002e53
 8002d80:	08002eb9 	.word	0x08002eb9
 8002d84:	08002ed5 	.word	0x08002ed5
 8002d88:	08002e43 	.word	0x08002e43
 8002d8c:	08002ed5 	.word	0x08002ed5
 8002d90:	08002ed5 	.word	0x08002ed5
 8002d94:	08002ed5 	.word	0x08002ed5
 8002d98:	08002e4b 	.word	0x08002e4b
 8002d9c:	08002ed5 	.word	0x08002ed5
 8002da0:	08002ed5 	.word	0x08002ed5
 8002da4:	08002ed5 	.word	0x08002ed5
 8002da8:	08002ed5 	.word	0x08002ed5
 8002dac:	08002ed5 	.word	0x08002ed5
 8002db0:	08002ed5 	.word	0x08002ed5
 8002db4:	08002ed5 	.word	0x08002ed5
 8002db8:	08002dbd 	.word	0x08002dbd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002dbc:	4b4a      	ldr	r3, [pc, #296]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002dc2:	4b49      	ldr	r3, [pc, #292]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8084 	beq.w	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0c9b      	lsrs	r3, r3, #18
 8002dd4:	f003 030f 	and.w	r3, r3, #15
 8002dd8:	4a44      	ldr	r2, [pc, #272]	; (8002eec <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002dda:	5cd3      	ldrb	r3, [r2, r3]
 8002ddc:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d015      	beq.n	8002e14 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0c5b      	lsrs	r3, r3, #17
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	4a3f      	ldr	r2, [pc, #252]	; (8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002e02:	4a3c      	ldr	r2, [pc, #240]	; (8002ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e004      	b.n	8002e1e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002e18:	fb02 f303 	mul.w	r3, r2, r3
 8002e1c:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e2a:	d102      	bne.n	8002e32 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002e30:	e052      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	085b      	lsrs	r3, r3, #1
 8002e3e:	61bb      	str	r3, [r7, #24]
      break;
 8002e40:	e04a      	b.n	8002ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e42:	f7ff fe2b 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002e46:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e48:	e049      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7ff fe27 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002e4e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002e50:	e045      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002e52:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d108      	bne.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e01f      	b.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e80:	d109      	bne.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002e8e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e00f      	b.n	8002eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d016      	beq.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8002eae:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002eb2:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002eb4:	e012      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8002eb6:	e011      	b.n	8002edc <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002eb8:	f7ff fe62 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0b9b      	lsrs	r3, r3, #14
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	3301      	adds	r3, #1
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	61bb      	str	r3, [r7, #24]
      break;
 8002ed2:	e004      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e002      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8002edc:	bf00      	nop
    }
  }
  return (frequency);
 8002ede:	69bb      	ldr	r3, [r7, #24]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	08004bd0 	.word	0x08004bd0
 8002ef0:	08004be0 	.word	0x08004be0
 8002ef4:	007a1200 	.word	0x007a1200
 8002ef8:	003d0900 	.word	0x003d0900
 8002efc:	aaaaaaab 	.word	0xaaaaaaab

08002f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e041      	b.n	8002f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f890 	bl	800104c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fa2a 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d122      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d11b      	bne.n	8002ffa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0202 	mvn.w	r2, #2
 8002fca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f9bd 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 8002fe6:	e005      	b.n	8002ff4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9b0 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9bf 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d122      	bne.n	800304e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b04      	cmp	r3, #4
 8003014:	d11b      	bne.n	800304e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f06f 0204 	mvn.w	r2, #4
 800301e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f993 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 800303a:	e005      	b.n	8003048 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f986 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f995 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d122      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b08      	cmp	r3, #8
 8003068:	d11b      	bne.n	80030a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0208 	mvn.w	r2, #8
 8003072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2204      	movs	r2, #4
 8003078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f969 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 800308e:	e005      	b.n	800309c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f95c 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f96b 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d122      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d11b      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0210 	mvn.w	r2, #16
 80030c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2208      	movs	r2, #8
 80030cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f93f 	bl	8003360 <HAL_TIM_IC_CaptureCallback>
 80030e2:	e005      	b.n	80030f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f932 	bl	800334e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f941 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10e      	bne.n	8003122 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b01      	cmp	r3, #1
 8003110:	d107      	bne.n	8003122 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0201 	mvn.w	r2, #1
 800311a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f90d 	bl	800333c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d10e      	bne.n	800314e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313a:	2b80      	cmp	r3, #128	; 0x80
 800313c:	d107      	bne.n	800314e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 faaa 	bl	80036a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b40      	cmp	r3, #64	; 0x40
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b40      	cmp	r3, #64	; 0x40
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f905 	bl	8003384 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0320 	and.w	r3, r3, #32
 8003184:	2b20      	cmp	r3, #32
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0220 	mvn.w	r2, #32
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa75 	bl	8003690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_ConfigClockSource+0x1c>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0b4      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x186>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003202:	d03e      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xd4>
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003208:	f200 8087 	bhi.w	800331a <HAL_TIM_ConfigClockSource+0x16c>
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003210:	f000 8086 	beq.w	8003320 <HAL_TIM_ConfigClockSource+0x172>
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003218:	d87f      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 800321a:	2b70      	cmp	r3, #112	; 0x70
 800321c:	d01a      	beq.n	8003254 <HAL_TIM_ConfigClockSource+0xa6>
 800321e:	2b70      	cmp	r3, #112	; 0x70
 8003220:	d87b      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 8003222:	2b60      	cmp	r3, #96	; 0x60
 8003224:	d050      	beq.n	80032c8 <HAL_TIM_ConfigClockSource+0x11a>
 8003226:	2b60      	cmp	r3, #96	; 0x60
 8003228:	d877      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 800322a:	2b50      	cmp	r3, #80	; 0x50
 800322c:	d03c      	beq.n	80032a8 <HAL_TIM_ConfigClockSource+0xfa>
 800322e:	2b50      	cmp	r3, #80	; 0x50
 8003230:	d873      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d058      	beq.n	80032e8 <HAL_TIM_ConfigClockSource+0x13a>
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d86f      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d064      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x15a>
 800323e:	2b30      	cmp	r3, #48	; 0x30
 8003240:	d86b      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 8003242:	2b20      	cmp	r3, #32
 8003244:	d060      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x15a>
 8003246:	2b20      	cmp	r3, #32
 8003248:	d867      	bhi.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d05c      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x15a>
 800324e:	2b10      	cmp	r3, #16
 8003250:	d05a      	beq.n	8003308 <HAL_TIM_ConfigClockSource+0x15a>
 8003252:	e062      	b.n	800331a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003264:	f000 f989 	bl	800357a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003276:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
      break;
 8003280:	e04f      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003292:	f000 f972 	bl	800357a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a4:	609a      	str	r2, [r3, #8]
      break;
 80032a6:	e03c      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b4:	461a      	mov	r2, r3
 80032b6:	f000 f8e9 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2150      	movs	r1, #80	; 0x50
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f940 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 80032c6:	e02c      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d4:	461a      	mov	r2, r3
 80032d6:	f000 f907 	bl	80034e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2160      	movs	r1, #96	; 0x60
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f930 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 80032e6:	e01c      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f4:	461a      	mov	r2, r3
 80032f6:	f000 f8c9 	bl	800348c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2140      	movs	r1, #64	; 0x40
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f920 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8003306:	e00c      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f000 f917 	bl	8003546 <TIM_ITRx_SetConfig>
      break;
 8003318:	e003      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      break;
 800331e:	e000      	b.n	8003322 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003320:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a33      	ldr	r2, [pc, #204]	; (8003478 <TIM_Base_SetConfig+0xe0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a32      	ldr	r2, [pc, #200]	; (800347c <TIM_Base_SetConfig+0xe4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a2f      	ldr	r2, [pc, #188]	; (8003480 <TIM_Base_SetConfig+0xe8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a2e      	ldr	r2, [pc, #184]	; (8003484 <TIM_Base_SetConfig+0xec>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <TIM_Base_SetConfig+0xf0>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <TIM_Base_SetConfig+0xe0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d013      	beq.n	800341a <TIM_Base_SetConfig+0x82>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a21      	ldr	r2, [pc, #132]	; (800347c <TIM_Base_SetConfig+0xe4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00f      	beq.n	800341a <TIM_Base_SetConfig+0x82>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003400:	d00b      	beq.n	800341a <TIM_Base_SetConfig+0x82>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <TIM_Base_SetConfig+0xe8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <TIM_Base_SetConfig+0x82>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <TIM_Base_SetConfig+0xec>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d003      	beq.n	800341a <TIM_Base_SetConfig+0x82>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_Base_SetConfig+0xf0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d108      	bne.n	800342c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4313      	orrs	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a09      	ldr	r2, [pc, #36]	; (8003478 <TIM_Base_SetConfig+0xe0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0xc8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <TIM_Base_SetConfig+0xe4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40013400 	.word	0x40013400
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00

0800348c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	f023 0201 	bic.w	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 030a 	bic.w	r3, r3, #10
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	621a      	str	r2, [r3, #32]
}
 80034de:	bf00      	nop
 80034e0:	371c      	adds	r7, #28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr

080034e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b087      	sub	sp, #28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	f023 0210 	bic.w	r2, r3, #16
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	031b      	lsls	r3, r3, #12
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003524:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr

08003546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003546:	b480      	push	{r7}
 8003548:	b085      	sub	sp, #20
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	f043 0307 	orr.w	r3, r3, #7
 8003568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	609a      	str	r2, [r3, #8]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800357a:	b480      	push	{r7}
 800357c:	b087      	sub	sp, #28
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003594:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	431a      	orrs	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	609a      	str	r2, [r3, #8]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e050      	b.n	8003672 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a19      	ldr	r2, [pc, #100]	; (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d00e      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a15      	ldr	r2, [pc, #84]	; (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a12      	ldr	r2, [pc, #72]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d10c      	bne.n	8003660 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	bc80      	pop	{r7}
 800367a:	4770      	bx	lr
 800367c:	40012c00 	.word	0x40012c00
 8003680:	40013400 	.word	0x40013400
 8003684:	40000400 	.word	0x40000400
 8003688:	40000800 	.word	0x40000800
 800368c:	40000c00 	.word	0x40000c00

08003690 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e042      	b.n	800374c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fd fd04 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9af 	bl	8003a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800370c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695a      	ldr	r2, [r3, #20]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800371c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b20      	cmp	r3, #32
 8003772:	d16d      	bne.n	8003850 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_UART_Transmit+0x2c>
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e066      	b.n	8003852 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2221      	movs	r2, #33	; 0x21
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003792:	f7fd fd73 	bl	800127c <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	88fa      	ldrh	r2, [r7, #6]
 800379c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d108      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d104      	bne.n	80037c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	e003      	b.n	80037c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c8:	e02a      	b.n	8003820 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f8d2 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e036      	b.n	8003852 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10b      	bne.n	8003802 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	3302      	adds	r3, #2
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	e007      	b.n	8003812 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	781a      	ldrb	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1cf      	bne.n	80037ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2200      	movs	r2, #0
 8003832:	2140      	movs	r1, #64	; 0x40
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f8a2 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e006      	b.n	8003852 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	e000      	b.n	8003852 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
  }
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b08a      	sub	sp, #40	; 0x28
 800385e:	af02      	add	r7, sp, #8
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	603b      	str	r3, [r7, #0]
 8003866:	4613      	mov	r3, r2
 8003868:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	d17c      	bne.n	8003974 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_UART_Receive+0x2c>
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e075      	b.n	8003976 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2222      	movs	r2, #34	; 0x22
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389e:	f7fd fced 	bl	800127c <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	88fa      	ldrh	r2, [r7, #6]
 80038a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	88fa      	ldrh	r2, [r7, #6]
 80038ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b8:	d108      	bne.n	80038cc <HAL_UART_Receive+0x72>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d104      	bne.n	80038cc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e003      	b.n	80038d4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038d4:	e043      	b.n	800395e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	2120      	movs	r1, #32
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f84c 	bl	800397e <UART_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e042      	b.n	8003976 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10c      	bne.n	8003910 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003902:	b29a      	uxth	r2, r3
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	3302      	adds	r3, #2
 800390c:	61bb      	str	r3, [r7, #24]
 800390e:	e01f      	b.n	8003950 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003918:	d007      	beq.n	800392a <HAL_UART_Receive+0xd0>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_UART_Receive+0xde>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	e008      	b.n	800394a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003944:	b2da      	uxtb	r2, r3
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003962:	b29b      	uxth	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1b6      	bne.n	80038d6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	4618      	mov	r0, r3
 8003978:	3720      	adds	r7, #32
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b090      	sub	sp, #64	; 0x40
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	603b      	str	r3, [r7, #0]
 800398a:	4613      	mov	r3, r2
 800398c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398e:	e050      	b.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d04c      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <UART_WaitOnFlagUntilTimeout+0x30>
 800399e:	f7fd fc6d 	bl	800127c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d241      	bcs.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ce:	637a      	str	r2, [r7, #52]	; 0x34
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d6:	e841 2300 	strex	r3, r2, [r1]
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e5      	bne.n	80039ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3314      	adds	r3, #20
 80039e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	613b      	str	r3, [r7, #16]
   return(result);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a02:	623a      	str	r2, [r7, #32]
 8003a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e5      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e00f      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d09f      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3740      	adds	r7, #64	; 0x40
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a96:	f023 030c 	bic.w	r3, r3, #12
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <UART_SetConfig+0x114>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d103      	bne.n	8003acc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ac4:	f7ff f85c 	bl	8002b80 <HAL_RCC_GetPCLK2Freq>
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	e002      	b.n	8003ad2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003acc:	f7ff f844 	bl	8002b58 <HAL_RCC_GetPCLK1Freq>
 8003ad0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	009a      	lsls	r2, r3, #2
 8003adc:	441a      	add	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <UART_SetConfig+0x118>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	0119      	lsls	r1, r3, #4
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <UART_SetConfig+0x118>)
 8003b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2064      	movs	r0, #100	; 0x64
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	3332      	adds	r3, #50	; 0x32
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <UART_SetConfig+0x118>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b28:	4419      	add	r1, r3
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009a      	lsls	r2, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <UART_SetConfig+0x118>)
 8003b42:	fba3 0302 	umull	r0, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	2064      	movs	r0, #100	; 0x64
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	3332      	adds	r3, #50	; 0x32
 8003b54:	4a07      	ldr	r2, [pc, #28]	; (8003b74 <UART_SetConfig+0x118>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	440a      	add	r2, r1
 8003b66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40013800 	.word	0x40013800
 8003b74:	51eb851f 	.word	0x51eb851f

08003b78 <std>:
 8003b78:	2300      	movs	r3, #0
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b86:	6083      	str	r3, [r0, #8]
 8003b88:	8181      	strh	r1, [r0, #12]
 8003b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b8c:	81c2      	strh	r2, [r0, #14]
 8003b8e:	6183      	str	r3, [r0, #24]
 8003b90:	4619      	mov	r1, r3
 8003b92:	2208      	movs	r2, #8
 8003b94:	305c      	adds	r0, #92	; 0x5c
 8003b96:	f000 f9b4 	bl	8003f02 <memset>
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <std+0x58>)
 8003b9c:	6224      	str	r4, [r4, #32]
 8003b9e:	6263      	str	r3, [r4, #36]	; 0x24
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <std+0x5c>)
 8003ba2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <std+0x60>)
 8003ba6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ba8:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <std+0x64>)
 8003baa:	6323      	str	r3, [r4, #48]	; 0x30
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <std+0x68>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d006      	beq.n	8003bc0 <std+0x48>
 8003bb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003bb6:	4294      	cmp	r4, r2
 8003bb8:	d002      	beq.n	8003bc0 <std+0x48>
 8003bba:	33d0      	adds	r3, #208	; 0xd0
 8003bbc:	429c      	cmp	r4, r3
 8003bbe:	d105      	bne.n	8003bcc <std+0x54>
 8003bc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bc8:	f000 ba14 	b.w	8003ff4 <__retarget_lock_init_recursive>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	bf00      	nop
 8003bd0:	08003e7d 	.word	0x08003e7d
 8003bd4:	08003e9f 	.word	0x08003e9f
 8003bd8:	08003ed7 	.word	0x08003ed7
 8003bdc:	08003efb 	.word	0x08003efb
 8003be0:	20000150 	.word	0x20000150

08003be4 <stdio_exit_handler>:
 8003be4:	4a02      	ldr	r2, [pc, #8]	; (8003bf0 <stdio_exit_handler+0xc>)
 8003be6:	4903      	ldr	r1, [pc, #12]	; (8003bf4 <stdio_exit_handler+0x10>)
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <stdio_exit_handler+0x14>)
 8003bea:	f000 b869 	b.w	8003cc0 <_fwalk_sglue>
 8003bee:	bf00      	nop
 8003bf0:	2000000c 	.word	0x2000000c
 8003bf4:	080048a5 	.word	0x080048a5
 8003bf8:	20000018 	.word	0x20000018

08003bfc <cleanup_stdio>:
 8003bfc:	6841      	ldr	r1, [r0, #4]
 8003bfe:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <cleanup_stdio+0x34>)
 8003c00:	b510      	push	{r4, lr}
 8003c02:	4299      	cmp	r1, r3
 8003c04:	4604      	mov	r4, r0
 8003c06:	d001      	beq.n	8003c0c <cleanup_stdio+0x10>
 8003c08:	f000 fe4c 	bl	80048a4 <_fflush_r>
 8003c0c:	68a1      	ldr	r1, [r4, #8]
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <cleanup_stdio+0x38>)
 8003c10:	4299      	cmp	r1, r3
 8003c12:	d002      	beq.n	8003c1a <cleanup_stdio+0x1e>
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 fe45 	bl	80048a4 <_fflush_r>
 8003c1a:	68e1      	ldr	r1, [r4, #12]
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <cleanup_stdio+0x3c>)
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d004      	beq.n	8003c2c <cleanup_stdio+0x30>
 8003c22:	4620      	mov	r0, r4
 8003c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c28:	f000 be3c 	b.w	80048a4 <_fflush_r>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000150 	.word	0x20000150
 8003c34:	200001b8 	.word	0x200001b8
 8003c38:	20000220 	.word	0x20000220

08003c3c <global_stdio_init.part.0>:
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <global_stdio_init.part.0+0x30>)
 8003c40:	4c0b      	ldr	r4, [pc, #44]	; (8003c70 <global_stdio_init.part.0+0x34>)
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <global_stdio_init.part.0+0x38>)
 8003c44:	4620      	mov	r0, r4
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	2104      	movs	r1, #4
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f7ff ff94 	bl	8003b78 <std>
 8003c50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003c54:	2201      	movs	r2, #1
 8003c56:	2109      	movs	r1, #9
 8003c58:	f7ff ff8e 	bl	8003b78 <std>
 8003c5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003c60:	2202      	movs	r2, #2
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c66:	2112      	movs	r1, #18
 8003c68:	f7ff bf86 	b.w	8003b78 <std>
 8003c6c:	20000288 	.word	0x20000288
 8003c70:	20000150 	.word	0x20000150
 8003c74:	08003be5 	.word	0x08003be5

08003c78 <__sfp_lock_acquire>:
 8003c78:	4801      	ldr	r0, [pc, #4]	; (8003c80 <__sfp_lock_acquire+0x8>)
 8003c7a:	f000 b9bc 	b.w	8003ff6 <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	20000291 	.word	0x20000291

08003c84 <__sfp_lock_release>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__sfp_lock_release+0x8>)
 8003c86:	f000 b9b7 	b.w	8003ff8 <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	20000291 	.word	0x20000291

08003c90 <__sinit>:
 8003c90:	b510      	push	{r4, lr}
 8003c92:	4604      	mov	r4, r0
 8003c94:	f7ff fff0 	bl	8003c78 <__sfp_lock_acquire>
 8003c98:	6a23      	ldr	r3, [r4, #32]
 8003c9a:	b11b      	cbz	r3, 8003ca4 <__sinit+0x14>
 8003c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ca0:	f7ff bff0 	b.w	8003c84 <__sfp_lock_release>
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <__sinit+0x28>)
 8003ca6:	6223      	str	r3, [r4, #32]
 8003ca8:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <__sinit+0x2c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f5      	bne.n	8003c9c <__sinit+0xc>
 8003cb0:	f7ff ffc4 	bl	8003c3c <global_stdio_init.part.0>
 8003cb4:	e7f2      	b.n	8003c9c <__sinit+0xc>
 8003cb6:	bf00      	nop
 8003cb8:	08003bfd 	.word	0x08003bfd
 8003cbc:	20000288 	.word	0x20000288

08003cc0 <_fwalk_sglue>:
 8003cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cc4:	4607      	mov	r7, r0
 8003cc6:	4688      	mov	r8, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003cd0:	f1b9 0901 	subs.w	r9, r9, #1
 8003cd4:	d505      	bpl.n	8003ce2 <_fwalk_sglue+0x22>
 8003cd6:	6824      	ldr	r4, [r4, #0]
 8003cd8:	2c00      	cmp	r4, #0
 8003cda:	d1f7      	bne.n	8003ccc <_fwalk_sglue+0xc>
 8003cdc:	4630      	mov	r0, r6
 8003cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d907      	bls.n	8003cf8 <_fwalk_sglue+0x38>
 8003ce8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003cec:	3301      	adds	r3, #1
 8003cee:	d003      	beq.n	8003cf8 <_fwalk_sglue+0x38>
 8003cf0:	4629      	mov	r1, r5
 8003cf2:	4638      	mov	r0, r7
 8003cf4:	47c0      	blx	r8
 8003cf6:	4306      	orrs	r6, r0
 8003cf8:	3568      	adds	r5, #104	; 0x68
 8003cfa:	e7e9      	b.n	8003cd0 <_fwalk_sglue+0x10>

08003cfc <iprintf>:
 8003cfc:	b40f      	push	{r0, r1, r2, r3}
 8003cfe:	b507      	push	{r0, r1, r2, lr}
 8003d00:	4906      	ldr	r1, [pc, #24]	; (8003d1c <iprintf+0x20>)
 8003d02:	ab04      	add	r3, sp, #16
 8003d04:	6808      	ldr	r0, [r1, #0]
 8003d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d0a:	6881      	ldr	r1, [r0, #8]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	f000 fa99 	bl	8004244 <_vfiprintf_r>
 8003d12:	b003      	add	sp, #12
 8003d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d18:	b004      	add	sp, #16
 8003d1a:	4770      	bx	lr
 8003d1c:	20000064 	.word	0x20000064

08003d20 <setvbuf>:
 8003d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d24:	461d      	mov	r5, r3
 8003d26:	4b54      	ldr	r3, [pc, #336]	; (8003e78 <setvbuf+0x158>)
 8003d28:	4604      	mov	r4, r0
 8003d2a:	681f      	ldr	r7, [r3, #0]
 8003d2c:	460e      	mov	r6, r1
 8003d2e:	4690      	mov	r8, r2
 8003d30:	b127      	cbz	r7, 8003d3c <setvbuf+0x1c>
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	b913      	cbnz	r3, 8003d3c <setvbuf+0x1c>
 8003d36:	4638      	mov	r0, r7
 8003d38:	f7ff ffaa 	bl	8003c90 <__sinit>
 8003d3c:	f1b8 0f02 	cmp.w	r8, #2
 8003d40:	d006      	beq.n	8003d50 <setvbuf+0x30>
 8003d42:	f1b8 0f01 	cmp.w	r8, #1
 8003d46:	f200 8094 	bhi.w	8003e72 <setvbuf+0x152>
 8003d4a:	2d00      	cmp	r5, #0
 8003d4c:	f2c0 8091 	blt.w	8003e72 <setvbuf+0x152>
 8003d50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d52:	07da      	lsls	r2, r3, #31
 8003d54:	d405      	bmi.n	8003d62 <setvbuf+0x42>
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	059b      	lsls	r3, r3, #22
 8003d5a:	d402      	bmi.n	8003d62 <setvbuf+0x42>
 8003d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d5e:	f000 f94a 	bl	8003ff6 <__retarget_lock_acquire_recursive>
 8003d62:	4621      	mov	r1, r4
 8003d64:	4638      	mov	r0, r7
 8003d66:	f000 fd9d 	bl	80048a4 <_fflush_r>
 8003d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d6c:	b141      	cbz	r1, 8003d80 <setvbuf+0x60>
 8003d6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d72:	4299      	cmp	r1, r3
 8003d74:	d002      	beq.n	8003d7c <setvbuf+0x5c>
 8003d76:	4638      	mov	r0, r7
 8003d78:	f000 f940 	bl	8003ffc <_free_r>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	6363      	str	r3, [r4, #52]	; 0x34
 8003d80:	2300      	movs	r3, #0
 8003d82:	61a3      	str	r3, [r4, #24]
 8003d84:	6063      	str	r3, [r4, #4]
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	0618      	lsls	r0, r3, #24
 8003d8a:	d503      	bpl.n	8003d94 <setvbuf+0x74>
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	f000 f934 	bl	8003ffc <_free_r>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f1b8 0f02 	cmp.w	r8, #2
 8003d9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003d9e:	f023 0303 	bic.w	r3, r3, #3
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	d05f      	beq.n	8003e66 <setvbuf+0x146>
 8003da6:	ab01      	add	r3, sp, #4
 8003da8:	466a      	mov	r2, sp
 8003daa:	4621      	mov	r1, r4
 8003dac:	4638      	mov	r0, r7
 8003dae:	f000 fda1 	bl	80048f4 <__swhatbuf_r>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	4318      	orrs	r0, r3
 8003db6:	81a0      	strh	r0, [r4, #12]
 8003db8:	bb2d      	cbnz	r5, 8003e06 <setvbuf+0xe6>
 8003dba:	9d00      	ldr	r5, [sp, #0]
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f965 	bl	800408c <malloc>
 8003dc2:	4606      	mov	r6, r0
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d150      	bne.n	8003e6a <setvbuf+0x14a>
 8003dc8:	f8dd 9000 	ldr.w	r9, [sp]
 8003dcc:	45a9      	cmp	r9, r5
 8003dce:	d13e      	bne.n	8003e4e <setvbuf+0x12e>
 8003dd0:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60a2      	str	r2, [r4, #8]
 8003dd8:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003ddc:	6022      	str	r2, [r4, #0]
 8003dde:	6122      	str	r2, [r4, #16]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de6:	6162      	str	r2, [r4, #20]
 8003de8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003dea:	f043 0302 	orr.w	r3, r3, #2
 8003dee:	07d1      	lsls	r1, r2, #31
 8003df0:	81a3      	strh	r3, [r4, #12]
 8003df2:	d404      	bmi.n	8003dfe <setvbuf+0xde>
 8003df4:	059b      	lsls	r3, r3, #22
 8003df6:	d402      	bmi.n	8003dfe <setvbuf+0xde>
 8003df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfa:	f000 f8fd 	bl	8003ff8 <__retarget_lock_release_recursive>
 8003dfe:	4628      	mov	r0, r5
 8003e00:	b003      	add	sp, #12
 8003e02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e06:	2e00      	cmp	r6, #0
 8003e08:	d0d8      	beq.n	8003dbc <setvbuf+0x9c>
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	b913      	cbnz	r3, 8003e14 <setvbuf+0xf4>
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f7ff ff3e 	bl	8003c90 <__sinit>
 8003e14:	f1b8 0f01 	cmp.w	r8, #1
 8003e18:	bf08      	it	eq
 8003e1a:	89a3      	ldrheq	r3, [r4, #12]
 8003e1c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003e20:	bf04      	itt	eq
 8003e22:	f043 0301 	orreq.w	r3, r3, #1
 8003e26:	81a3      	strheq	r3, [r4, #12]
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	6026      	str	r6, [r4, #0]
 8003e2c:	f013 0208 	ands.w	r2, r3, #8
 8003e30:	d01d      	beq.n	8003e6e <setvbuf+0x14e>
 8003e32:	07da      	lsls	r2, r3, #31
 8003e34:	bf41      	itttt	mi
 8003e36:	2200      	movmi	r2, #0
 8003e38:	426d      	negmi	r5, r5
 8003e3a:	60a2      	strmi	r2, [r4, #8]
 8003e3c:	61a5      	strmi	r5, [r4, #24]
 8003e3e:	bf58      	it	pl
 8003e40:	60a5      	strpl	r5, [r4, #8]
 8003e42:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003e44:	f015 0501 	ands.w	r5, r5, #1
 8003e48:	d0d4      	beq.n	8003df4 <setvbuf+0xd4>
 8003e4a:	2500      	movs	r5, #0
 8003e4c:	e7d7      	b.n	8003dfe <setvbuf+0xde>
 8003e4e:	4648      	mov	r0, r9
 8003e50:	f000 f91c 	bl	800408c <malloc>
 8003e54:	4606      	mov	r6, r0
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d0ba      	beq.n	8003dd0 <setvbuf+0xb0>
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	464d      	mov	r5, r9
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	e7d1      	b.n	8003e0a <setvbuf+0xea>
 8003e66:	2500      	movs	r5, #0
 8003e68:	e7b4      	b.n	8003dd4 <setvbuf+0xb4>
 8003e6a:	46a9      	mov	r9, r5
 8003e6c:	e7f5      	b.n	8003e5a <setvbuf+0x13a>
 8003e6e:	60a2      	str	r2, [r4, #8]
 8003e70:	e7e7      	b.n	8003e42 <setvbuf+0x122>
 8003e72:	f04f 35ff 	mov.w	r5, #4294967295
 8003e76:	e7c2      	b.n	8003dfe <setvbuf+0xde>
 8003e78:	20000064 	.word	0x20000064

08003e7c <__sread>:
 8003e7c:	b510      	push	{r4, lr}
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e84:	f000 f868 	bl	8003f58 <_read_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	bfab      	itete	ge
 8003e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e90:	181b      	addge	r3, r3, r0
 8003e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e96:	bfac      	ite	ge
 8003e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e9a:	81a3      	strhlt	r3, [r4, #12]
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <__swrite>:
 8003e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea2:	461f      	mov	r7, r3
 8003ea4:	898b      	ldrh	r3, [r1, #12]
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	05db      	lsls	r3, r3, #23
 8003eaa:	460c      	mov	r4, r1
 8003eac:	4616      	mov	r6, r2
 8003eae:	d505      	bpl.n	8003ebc <__swrite+0x1e>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb8:	f000 f83c 	bl	8003f34 <_lseek_r>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	4632      	mov	r2, r6
 8003ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec4:	81a3      	strh	r3, [r4, #12]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	463b      	mov	r3, r7
 8003eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed2:	f000 b853 	b.w	8003f7c <_write_r>

08003ed6 <__sseek>:
 8003ed6:	b510      	push	{r4, lr}
 8003ed8:	460c      	mov	r4, r1
 8003eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ede:	f000 f829 	bl	8003f34 <_lseek_r>
 8003ee2:	1c43      	adds	r3, r0, #1
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	bf15      	itete	ne
 8003ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ef2:	81a3      	strheq	r3, [r4, #12]
 8003ef4:	bf18      	it	ne
 8003ef6:	81a3      	strhne	r3, [r4, #12]
 8003ef8:	bd10      	pop	{r4, pc}

08003efa <__sclose>:
 8003efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efe:	f000 b809 	b.w	8003f14 <_close_r>

08003f02 <memset>:
 8003f02:	4603      	mov	r3, r0
 8003f04:	4402      	add	r2, r0
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d100      	bne.n	8003f0c <memset+0xa>
 8003f0a:	4770      	bx	lr
 8003f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8003f10:	e7f9      	b.n	8003f06 <memset+0x4>
	...

08003f14 <_close_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	2300      	movs	r3, #0
 8003f18:	4d05      	ldr	r5, [pc, #20]	; (8003f30 <_close_r+0x1c>)
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fc ffda 	bl	8000ed8 <_close>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_close_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_close_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	2000028c 	.word	0x2000028c

08003f34 <_lseek_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	4d05      	ldr	r5, [pc, #20]	; (8003f54 <_lseek_r+0x20>)
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc ffec 	bl	8000f20 <_lseek>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_lseek_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_lseek_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	2000028c 	.word	0x2000028c

08003f58 <_read_r>:
 8003f58:	b538      	push	{r3, r4, r5, lr}
 8003f5a:	4604      	mov	r4, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	4611      	mov	r1, r2
 8003f60:	2200      	movs	r2, #0
 8003f62:	4d05      	ldr	r5, [pc, #20]	; (8003f78 <_read_r+0x20>)
 8003f64:	602a      	str	r2, [r5, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	f7fc ff20 	bl	8000dac <_read>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d102      	bne.n	8003f76 <_read_r+0x1e>
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	b103      	cbz	r3, 8003f76 <_read_r+0x1e>
 8003f74:	6023      	str	r3, [r4, #0]
 8003f76:	bd38      	pop	{r3, r4, r5, pc}
 8003f78:	2000028c 	.word	0x2000028c

08003f7c <_write_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	4608      	mov	r0, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	2200      	movs	r2, #0
 8003f86:	4d05      	ldr	r5, [pc, #20]	; (8003f9c <_write_r+0x20>)
 8003f88:	602a      	str	r2, [r5, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f7fc fee2 	bl	8000d54 <_write>
 8003f90:	1c43      	adds	r3, r0, #1
 8003f92:	d102      	bne.n	8003f9a <_write_r+0x1e>
 8003f94:	682b      	ldr	r3, [r5, #0]
 8003f96:	b103      	cbz	r3, 8003f9a <_write_r+0x1e>
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	bd38      	pop	{r3, r4, r5, pc}
 8003f9c:	2000028c 	.word	0x2000028c

08003fa0 <__errno>:
 8003fa0:	4b01      	ldr	r3, [pc, #4]	; (8003fa8 <__errno+0x8>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000064 	.word	0x20000064

08003fac <__libc_init_array>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	2600      	movs	r6, #0
 8003fb0:	4d0c      	ldr	r5, [pc, #48]	; (8003fe4 <__libc_init_array+0x38>)
 8003fb2:	4c0d      	ldr	r4, [pc, #52]	; (8003fe8 <__libc_init_array+0x3c>)
 8003fb4:	1b64      	subs	r4, r4, r5
 8003fb6:	10a4      	asrs	r4, r4, #2
 8003fb8:	42a6      	cmp	r6, r4
 8003fba:	d109      	bne.n	8003fd0 <__libc_init_array+0x24>
 8003fbc:	f000 fdd0 	bl	8004b60 <_init>
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	4d0a      	ldr	r5, [pc, #40]	; (8003fec <__libc_init_array+0x40>)
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	; (8003ff0 <__libc_init_array+0x44>)
 8003fc6:	1b64      	subs	r4, r4, r5
 8003fc8:	10a4      	asrs	r4, r4, #2
 8003fca:	42a6      	cmp	r6, r4
 8003fcc:	d105      	bne.n	8003fda <__libc_init_array+0x2e>
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
 8003fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd4:	4798      	blx	r3
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7ee      	b.n	8003fb8 <__libc_init_array+0xc>
 8003fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fde:	4798      	blx	r3
 8003fe0:	3601      	adds	r6, #1
 8003fe2:	e7f2      	b.n	8003fca <__libc_init_array+0x1e>
 8003fe4:	08004c18 	.word	0x08004c18
 8003fe8:	08004c18 	.word	0x08004c18
 8003fec:	08004c18 	.word	0x08004c18
 8003ff0:	08004c1c 	.word	0x08004c1c

08003ff4 <__retarget_lock_init_recursive>:
 8003ff4:	4770      	bx	lr

08003ff6 <__retarget_lock_acquire_recursive>:
 8003ff6:	4770      	bx	lr

08003ff8 <__retarget_lock_release_recursive>:
 8003ff8:	4770      	bx	lr
	...

08003ffc <_free_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4605      	mov	r5, r0
 8004000:	2900      	cmp	r1, #0
 8004002:	d040      	beq.n	8004086 <_free_r+0x8a>
 8004004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004008:	1f0c      	subs	r4, r1, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	bfb8      	it	lt
 800400e:	18e4      	addlt	r4, r4, r3
 8004010:	f000 f8e4 	bl	80041dc <__malloc_lock>
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <_free_r+0x8c>)
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	b933      	cbnz	r3, 8004028 <_free_r+0x2c>
 800401a:	6063      	str	r3, [r4, #4]
 800401c:	6014      	str	r4, [r2, #0]
 800401e:	4628      	mov	r0, r5
 8004020:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004024:	f000 b8e0 	b.w	80041e8 <__malloc_unlock>
 8004028:	42a3      	cmp	r3, r4
 800402a:	d908      	bls.n	800403e <_free_r+0x42>
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	1821      	adds	r1, r4, r0
 8004030:	428b      	cmp	r3, r1
 8004032:	bf01      	itttt	eq
 8004034:	6819      	ldreq	r1, [r3, #0]
 8004036:	685b      	ldreq	r3, [r3, #4]
 8004038:	1809      	addeq	r1, r1, r0
 800403a:	6021      	streq	r1, [r4, #0]
 800403c:	e7ed      	b.n	800401a <_free_r+0x1e>
 800403e:	461a      	mov	r2, r3
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b10b      	cbz	r3, 8004048 <_free_r+0x4c>
 8004044:	42a3      	cmp	r3, r4
 8004046:	d9fa      	bls.n	800403e <_free_r+0x42>
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	1850      	adds	r0, r2, r1
 800404c:	42a0      	cmp	r0, r4
 800404e:	d10b      	bne.n	8004068 <_free_r+0x6c>
 8004050:	6820      	ldr	r0, [r4, #0]
 8004052:	4401      	add	r1, r0
 8004054:	1850      	adds	r0, r2, r1
 8004056:	4283      	cmp	r3, r0
 8004058:	6011      	str	r1, [r2, #0]
 800405a:	d1e0      	bne.n	800401e <_free_r+0x22>
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	4408      	add	r0, r1
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	6053      	str	r3, [r2, #4]
 8004066:	e7da      	b.n	800401e <_free_r+0x22>
 8004068:	d902      	bls.n	8004070 <_free_r+0x74>
 800406a:	230c      	movs	r3, #12
 800406c:	602b      	str	r3, [r5, #0]
 800406e:	e7d6      	b.n	800401e <_free_r+0x22>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	1821      	adds	r1, r4, r0
 8004074:	428b      	cmp	r3, r1
 8004076:	bf01      	itttt	eq
 8004078:	6819      	ldreq	r1, [r3, #0]
 800407a:	685b      	ldreq	r3, [r3, #4]
 800407c:	1809      	addeq	r1, r1, r0
 800407e:	6021      	streq	r1, [r4, #0]
 8004080:	6063      	str	r3, [r4, #4]
 8004082:	6054      	str	r4, [r2, #4]
 8004084:	e7cb      	b.n	800401e <_free_r+0x22>
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000294 	.word	0x20000294

0800408c <malloc>:
 800408c:	4b02      	ldr	r3, [pc, #8]	; (8004098 <malloc+0xc>)
 800408e:	4601      	mov	r1, r0
 8004090:	6818      	ldr	r0, [r3, #0]
 8004092:	f000 b823 	b.w	80040dc <_malloc_r>
 8004096:	bf00      	nop
 8004098:	20000064 	.word	0x20000064

0800409c <sbrk_aligned>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0e      	ldr	r6, [pc, #56]	; (80040d8 <sbrk_aligned+0x3c>)
 80040a0:	460c      	mov	r4, r1
 80040a2:	6831      	ldr	r1, [r6, #0]
 80040a4:	4605      	mov	r5, r0
 80040a6:	b911      	cbnz	r1, 80040ae <sbrk_aligned+0x12>
 80040a8:	f000 fd3c 	bl	8004b24 <_sbrk_r>
 80040ac:	6030      	str	r0, [r6, #0]
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 fd37 	bl	8004b24 <_sbrk_r>
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	d00a      	beq.n	80040d0 <sbrk_aligned+0x34>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d007      	beq.n	80040d4 <sbrk_aligned+0x38>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4628      	mov	r0, r5
 80040c8:	f000 fd2c 	bl	8004b24 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d101      	bne.n	80040d4 <sbrk_aligned+0x38>
 80040d0:	f04f 34ff 	mov.w	r4, #4294967295
 80040d4:	4620      	mov	r0, r4
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	20000298 	.word	0x20000298

080040dc <_malloc_r>:
 80040dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e0:	1ccd      	adds	r5, r1, #3
 80040e2:	f025 0503 	bic.w	r5, r5, #3
 80040e6:	3508      	adds	r5, #8
 80040e8:	2d0c      	cmp	r5, #12
 80040ea:	bf38      	it	cc
 80040ec:	250c      	movcc	r5, #12
 80040ee:	2d00      	cmp	r5, #0
 80040f0:	4607      	mov	r7, r0
 80040f2:	db01      	blt.n	80040f8 <_malloc_r+0x1c>
 80040f4:	42a9      	cmp	r1, r5
 80040f6:	d905      	bls.n	8004104 <_malloc_r+0x28>
 80040f8:	230c      	movs	r3, #12
 80040fa:	2600      	movs	r6, #0
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4630      	mov	r0, r6
 8004100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004104:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80041d8 <_malloc_r+0xfc>
 8004108:	f000 f868 	bl	80041dc <__malloc_lock>
 800410c:	f8d8 3000 	ldr.w	r3, [r8]
 8004110:	461c      	mov	r4, r3
 8004112:	bb5c      	cbnz	r4, 800416c <_malloc_r+0x90>
 8004114:	4629      	mov	r1, r5
 8004116:	4638      	mov	r0, r7
 8004118:	f7ff ffc0 	bl	800409c <sbrk_aligned>
 800411c:	1c43      	adds	r3, r0, #1
 800411e:	4604      	mov	r4, r0
 8004120:	d155      	bne.n	80041ce <_malloc_r+0xf2>
 8004122:	f8d8 4000 	ldr.w	r4, [r8]
 8004126:	4626      	mov	r6, r4
 8004128:	2e00      	cmp	r6, #0
 800412a:	d145      	bne.n	80041b8 <_malloc_r+0xdc>
 800412c:	2c00      	cmp	r4, #0
 800412e:	d048      	beq.n	80041c2 <_malloc_r+0xe6>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	4631      	mov	r1, r6
 8004134:	4638      	mov	r0, r7
 8004136:	eb04 0903 	add.w	r9, r4, r3
 800413a:	f000 fcf3 	bl	8004b24 <_sbrk_r>
 800413e:	4581      	cmp	r9, r0
 8004140:	d13f      	bne.n	80041c2 <_malloc_r+0xe6>
 8004142:	6821      	ldr	r1, [r4, #0]
 8004144:	4638      	mov	r0, r7
 8004146:	1a6d      	subs	r5, r5, r1
 8004148:	4629      	mov	r1, r5
 800414a:	f7ff ffa7 	bl	800409c <sbrk_aligned>
 800414e:	3001      	adds	r0, #1
 8004150:	d037      	beq.n	80041c2 <_malloc_r+0xe6>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	442b      	add	r3, r5
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	f8d8 3000 	ldr.w	r3, [r8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d038      	beq.n	80041d2 <_malloc_r+0xf6>
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	42a2      	cmp	r2, r4
 8004164:	d12b      	bne.n	80041be <_malloc_r+0xe2>
 8004166:	2200      	movs	r2, #0
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e00f      	b.n	800418c <_malloc_r+0xb0>
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	1b52      	subs	r2, r2, r5
 8004170:	d41f      	bmi.n	80041b2 <_malloc_r+0xd6>
 8004172:	2a0b      	cmp	r2, #11
 8004174:	d917      	bls.n	80041a6 <_malloc_r+0xca>
 8004176:	1961      	adds	r1, r4, r5
 8004178:	42a3      	cmp	r3, r4
 800417a:	6025      	str	r5, [r4, #0]
 800417c:	bf18      	it	ne
 800417e:	6059      	strne	r1, [r3, #4]
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	bf08      	it	eq
 8004184:	f8c8 1000 	streq.w	r1, [r8]
 8004188:	5162      	str	r2, [r4, r5]
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	4638      	mov	r0, r7
 800418e:	f104 060b 	add.w	r6, r4, #11
 8004192:	f000 f829 	bl	80041e8 <__malloc_unlock>
 8004196:	f026 0607 	bic.w	r6, r6, #7
 800419a:	1d23      	adds	r3, r4, #4
 800419c:	1af2      	subs	r2, r6, r3
 800419e:	d0ae      	beq.n	80040fe <_malloc_r+0x22>
 80041a0:	1b9b      	subs	r3, r3, r6
 80041a2:	50a3      	str	r3, [r4, r2]
 80041a4:	e7ab      	b.n	80040fe <_malloc_r+0x22>
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	6862      	ldr	r2, [r4, #4]
 80041aa:	d1dd      	bne.n	8004168 <_malloc_r+0x8c>
 80041ac:	f8c8 2000 	str.w	r2, [r8]
 80041b0:	e7ec      	b.n	800418c <_malloc_r+0xb0>
 80041b2:	4623      	mov	r3, r4
 80041b4:	6864      	ldr	r4, [r4, #4]
 80041b6:	e7ac      	b.n	8004112 <_malloc_r+0x36>
 80041b8:	4634      	mov	r4, r6
 80041ba:	6876      	ldr	r6, [r6, #4]
 80041bc:	e7b4      	b.n	8004128 <_malloc_r+0x4c>
 80041be:	4613      	mov	r3, r2
 80041c0:	e7cc      	b.n	800415c <_malloc_r+0x80>
 80041c2:	230c      	movs	r3, #12
 80041c4:	4638      	mov	r0, r7
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	f000 f80e 	bl	80041e8 <__malloc_unlock>
 80041cc:	e797      	b.n	80040fe <_malloc_r+0x22>
 80041ce:	6025      	str	r5, [r4, #0]
 80041d0:	e7dc      	b.n	800418c <_malloc_r+0xb0>
 80041d2:	605b      	str	r3, [r3, #4]
 80041d4:	deff      	udf	#255	; 0xff
 80041d6:	bf00      	nop
 80041d8:	20000294 	.word	0x20000294

080041dc <__malloc_lock>:
 80041dc:	4801      	ldr	r0, [pc, #4]	; (80041e4 <__malloc_lock+0x8>)
 80041de:	f7ff bf0a 	b.w	8003ff6 <__retarget_lock_acquire_recursive>
 80041e2:	bf00      	nop
 80041e4:	20000290 	.word	0x20000290

080041e8 <__malloc_unlock>:
 80041e8:	4801      	ldr	r0, [pc, #4]	; (80041f0 <__malloc_unlock+0x8>)
 80041ea:	f7ff bf05 	b.w	8003ff8 <__retarget_lock_release_recursive>
 80041ee:	bf00      	nop
 80041f0:	20000290 	.word	0x20000290

080041f4 <__sfputc_r>:
 80041f4:	6893      	ldr	r3, [r2, #8]
 80041f6:	b410      	push	{r4}
 80041f8:	3b01      	subs	r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	6093      	str	r3, [r2, #8]
 80041fe:	da07      	bge.n	8004210 <__sfputc_r+0x1c>
 8004200:	6994      	ldr	r4, [r2, #24]
 8004202:	42a3      	cmp	r3, r4
 8004204:	db01      	blt.n	800420a <__sfputc_r+0x16>
 8004206:	290a      	cmp	r1, #10
 8004208:	d102      	bne.n	8004210 <__sfputc_r+0x1c>
 800420a:	bc10      	pop	{r4}
 800420c:	f000 bbd3 	b.w	80049b6 <__swbuf_r>
 8004210:	6813      	ldr	r3, [r2, #0]
 8004212:	1c58      	adds	r0, r3, #1
 8004214:	6010      	str	r0, [r2, #0]
 8004216:	7019      	strb	r1, [r3, #0]
 8004218:	4608      	mov	r0, r1
 800421a:	bc10      	pop	{r4}
 800421c:	4770      	bx	lr

0800421e <__sfputs_r>:
 800421e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004220:	4606      	mov	r6, r0
 8004222:	460f      	mov	r7, r1
 8004224:	4614      	mov	r4, r2
 8004226:	18d5      	adds	r5, r2, r3
 8004228:	42ac      	cmp	r4, r5
 800422a:	d101      	bne.n	8004230 <__sfputs_r+0x12>
 800422c:	2000      	movs	r0, #0
 800422e:	e007      	b.n	8004240 <__sfputs_r+0x22>
 8004230:	463a      	mov	r2, r7
 8004232:	4630      	mov	r0, r6
 8004234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004238:	f7ff ffdc 	bl	80041f4 <__sfputc_r>
 800423c:	1c43      	adds	r3, r0, #1
 800423e:	d1f3      	bne.n	8004228 <__sfputs_r+0xa>
 8004240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004244 <_vfiprintf_r>:
 8004244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004248:	460d      	mov	r5, r1
 800424a:	4614      	mov	r4, r2
 800424c:	4698      	mov	r8, r3
 800424e:	4606      	mov	r6, r0
 8004250:	b09d      	sub	sp, #116	; 0x74
 8004252:	b118      	cbz	r0, 800425c <_vfiprintf_r+0x18>
 8004254:	6a03      	ldr	r3, [r0, #32]
 8004256:	b90b      	cbnz	r3, 800425c <_vfiprintf_r+0x18>
 8004258:	f7ff fd1a 	bl	8003c90 <__sinit>
 800425c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800425e:	07d9      	lsls	r1, r3, #31
 8004260:	d405      	bmi.n	800426e <_vfiprintf_r+0x2a>
 8004262:	89ab      	ldrh	r3, [r5, #12]
 8004264:	059a      	lsls	r2, r3, #22
 8004266:	d402      	bmi.n	800426e <_vfiprintf_r+0x2a>
 8004268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800426a:	f7ff fec4 	bl	8003ff6 <__retarget_lock_acquire_recursive>
 800426e:	89ab      	ldrh	r3, [r5, #12]
 8004270:	071b      	lsls	r3, r3, #28
 8004272:	d501      	bpl.n	8004278 <_vfiprintf_r+0x34>
 8004274:	692b      	ldr	r3, [r5, #16]
 8004276:	b99b      	cbnz	r3, 80042a0 <_vfiprintf_r+0x5c>
 8004278:	4629      	mov	r1, r5
 800427a:	4630      	mov	r0, r6
 800427c:	f000 fbd8 	bl	8004a30 <__swsetup_r>
 8004280:	b170      	cbz	r0, 80042a0 <_vfiprintf_r+0x5c>
 8004282:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004284:	07dc      	lsls	r4, r3, #31
 8004286:	d504      	bpl.n	8004292 <_vfiprintf_r+0x4e>
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	b01d      	add	sp, #116	; 0x74
 800428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004292:	89ab      	ldrh	r3, [r5, #12]
 8004294:	0598      	lsls	r0, r3, #22
 8004296:	d4f7      	bmi.n	8004288 <_vfiprintf_r+0x44>
 8004298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800429a:	f7ff fead 	bl	8003ff8 <__retarget_lock_release_recursive>
 800429e:	e7f3      	b.n	8004288 <_vfiprintf_r+0x44>
 80042a0:	2300      	movs	r3, #0
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
 80042a4:	2320      	movs	r3, #32
 80042a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042aa:	2330      	movs	r3, #48	; 0x30
 80042ac:	f04f 0901 	mov.w	r9, #1
 80042b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80042b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004464 <_vfiprintf_r+0x220>
 80042b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042bc:	4623      	mov	r3, r4
 80042be:	469a      	mov	sl, r3
 80042c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042c4:	b10a      	cbz	r2, 80042ca <_vfiprintf_r+0x86>
 80042c6:	2a25      	cmp	r2, #37	; 0x25
 80042c8:	d1f9      	bne.n	80042be <_vfiprintf_r+0x7a>
 80042ca:	ebba 0b04 	subs.w	fp, sl, r4
 80042ce:	d00b      	beq.n	80042e8 <_vfiprintf_r+0xa4>
 80042d0:	465b      	mov	r3, fp
 80042d2:	4622      	mov	r2, r4
 80042d4:	4629      	mov	r1, r5
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff ffa1 	bl	800421e <__sfputs_r>
 80042dc:	3001      	adds	r0, #1
 80042de:	f000 80a9 	beq.w	8004434 <_vfiprintf_r+0x1f0>
 80042e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042e4:	445a      	add	r2, fp
 80042e6:	9209      	str	r2, [sp, #36]	; 0x24
 80042e8:	f89a 3000 	ldrb.w	r3, [sl]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a1 	beq.w	8004434 <_vfiprintf_r+0x1f0>
 80042f2:	2300      	movs	r3, #0
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042fc:	f10a 0a01 	add.w	sl, sl, #1
 8004300:	9304      	str	r3, [sp, #16]
 8004302:	9307      	str	r3, [sp, #28]
 8004304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004308:	931a      	str	r3, [sp, #104]	; 0x68
 800430a:	4654      	mov	r4, sl
 800430c:	2205      	movs	r2, #5
 800430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004312:	4854      	ldr	r0, [pc, #336]	; (8004464 <_vfiprintf_r+0x220>)
 8004314:	f000 fc16 	bl	8004b44 <memchr>
 8004318:	9a04      	ldr	r2, [sp, #16]
 800431a:	b9d8      	cbnz	r0, 8004354 <_vfiprintf_r+0x110>
 800431c:	06d1      	lsls	r1, r2, #27
 800431e:	bf44      	itt	mi
 8004320:	2320      	movmi	r3, #32
 8004322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004326:	0713      	lsls	r3, r2, #28
 8004328:	bf44      	itt	mi
 800432a:	232b      	movmi	r3, #43	; 0x2b
 800432c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004330:	f89a 3000 	ldrb.w	r3, [sl]
 8004334:	2b2a      	cmp	r3, #42	; 0x2a
 8004336:	d015      	beq.n	8004364 <_vfiprintf_r+0x120>
 8004338:	4654      	mov	r4, sl
 800433a:	2000      	movs	r0, #0
 800433c:	f04f 0c0a 	mov.w	ip, #10
 8004340:	9a07      	ldr	r2, [sp, #28]
 8004342:	4621      	mov	r1, r4
 8004344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004348:	3b30      	subs	r3, #48	; 0x30
 800434a:	2b09      	cmp	r3, #9
 800434c:	d94d      	bls.n	80043ea <_vfiprintf_r+0x1a6>
 800434e:	b1b0      	cbz	r0, 800437e <_vfiprintf_r+0x13a>
 8004350:	9207      	str	r2, [sp, #28]
 8004352:	e014      	b.n	800437e <_vfiprintf_r+0x13a>
 8004354:	eba0 0308 	sub.w	r3, r0, r8
 8004358:	fa09 f303 	lsl.w	r3, r9, r3
 800435c:	4313      	orrs	r3, r2
 800435e:	46a2      	mov	sl, r4
 8004360:	9304      	str	r3, [sp, #16]
 8004362:	e7d2      	b.n	800430a <_vfiprintf_r+0xc6>
 8004364:	9b03      	ldr	r3, [sp, #12]
 8004366:	1d19      	adds	r1, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	9103      	str	r1, [sp, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	bfbb      	ittet	lt
 8004370:	425b      	neglt	r3, r3
 8004372:	f042 0202 	orrlt.w	r2, r2, #2
 8004376:	9307      	strge	r3, [sp, #28]
 8004378:	9307      	strlt	r3, [sp, #28]
 800437a:	bfb8      	it	lt
 800437c:	9204      	strlt	r2, [sp, #16]
 800437e:	7823      	ldrb	r3, [r4, #0]
 8004380:	2b2e      	cmp	r3, #46	; 0x2e
 8004382:	d10c      	bne.n	800439e <_vfiprintf_r+0x15a>
 8004384:	7863      	ldrb	r3, [r4, #1]
 8004386:	2b2a      	cmp	r3, #42	; 0x2a
 8004388:	d134      	bne.n	80043f4 <_vfiprintf_r+0x1b0>
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	3402      	adds	r4, #2
 800438e:	1d1a      	adds	r2, r3, #4
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	bfb8      	it	lt
 8004398:	f04f 33ff 	movlt.w	r3, #4294967295
 800439c:	9305      	str	r3, [sp, #20]
 800439e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004468 <_vfiprintf_r+0x224>
 80043a2:	2203      	movs	r2, #3
 80043a4:	4650      	mov	r0, sl
 80043a6:	7821      	ldrb	r1, [r4, #0]
 80043a8:	f000 fbcc 	bl	8004b44 <memchr>
 80043ac:	b138      	cbz	r0, 80043be <_vfiprintf_r+0x17a>
 80043ae:	2240      	movs	r2, #64	; 0x40
 80043b0:	9b04      	ldr	r3, [sp, #16]
 80043b2:	eba0 000a 	sub.w	r0, r0, sl
 80043b6:	4082      	lsls	r2, r0
 80043b8:	4313      	orrs	r3, r2
 80043ba:	3401      	adds	r4, #1
 80043bc:	9304      	str	r3, [sp, #16]
 80043be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043c2:	2206      	movs	r2, #6
 80043c4:	4829      	ldr	r0, [pc, #164]	; (800446c <_vfiprintf_r+0x228>)
 80043c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043ca:	f000 fbbb 	bl	8004b44 <memchr>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d03f      	beq.n	8004452 <_vfiprintf_r+0x20e>
 80043d2:	4b27      	ldr	r3, [pc, #156]	; (8004470 <_vfiprintf_r+0x22c>)
 80043d4:	bb1b      	cbnz	r3, 800441e <_vfiprintf_r+0x1da>
 80043d6:	9b03      	ldr	r3, [sp, #12]
 80043d8:	3307      	adds	r3, #7
 80043da:	f023 0307 	bic.w	r3, r3, #7
 80043de:	3308      	adds	r3, #8
 80043e0:	9303      	str	r3, [sp, #12]
 80043e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043e4:	443b      	add	r3, r7
 80043e6:	9309      	str	r3, [sp, #36]	; 0x24
 80043e8:	e768      	b.n	80042bc <_vfiprintf_r+0x78>
 80043ea:	460c      	mov	r4, r1
 80043ec:	2001      	movs	r0, #1
 80043ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80043f2:	e7a6      	b.n	8004342 <_vfiprintf_r+0xfe>
 80043f4:	2300      	movs	r3, #0
 80043f6:	f04f 0c0a 	mov.w	ip, #10
 80043fa:	4619      	mov	r1, r3
 80043fc:	3401      	adds	r4, #1
 80043fe:	9305      	str	r3, [sp, #20]
 8004400:	4620      	mov	r0, r4
 8004402:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004406:	3a30      	subs	r2, #48	; 0x30
 8004408:	2a09      	cmp	r2, #9
 800440a:	d903      	bls.n	8004414 <_vfiprintf_r+0x1d0>
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0c6      	beq.n	800439e <_vfiprintf_r+0x15a>
 8004410:	9105      	str	r1, [sp, #20]
 8004412:	e7c4      	b.n	800439e <_vfiprintf_r+0x15a>
 8004414:	4604      	mov	r4, r0
 8004416:	2301      	movs	r3, #1
 8004418:	fb0c 2101 	mla	r1, ip, r1, r2
 800441c:	e7f0      	b.n	8004400 <_vfiprintf_r+0x1bc>
 800441e:	ab03      	add	r3, sp, #12
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	462a      	mov	r2, r5
 8004424:	4630      	mov	r0, r6
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <_vfiprintf_r+0x230>)
 8004428:	a904      	add	r1, sp, #16
 800442a:	f3af 8000 	nop.w
 800442e:	4607      	mov	r7, r0
 8004430:	1c78      	adds	r0, r7, #1
 8004432:	d1d6      	bne.n	80043e2 <_vfiprintf_r+0x19e>
 8004434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004436:	07d9      	lsls	r1, r3, #31
 8004438:	d405      	bmi.n	8004446 <_vfiprintf_r+0x202>
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	059a      	lsls	r2, r3, #22
 800443e:	d402      	bmi.n	8004446 <_vfiprintf_r+0x202>
 8004440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004442:	f7ff fdd9 	bl	8003ff8 <__retarget_lock_release_recursive>
 8004446:	89ab      	ldrh	r3, [r5, #12]
 8004448:	065b      	lsls	r3, r3, #25
 800444a:	f53f af1d 	bmi.w	8004288 <_vfiprintf_r+0x44>
 800444e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004450:	e71c      	b.n	800428c <_vfiprintf_r+0x48>
 8004452:	ab03      	add	r3, sp, #12
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	462a      	mov	r2, r5
 8004458:	4630      	mov	r0, r6
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <_vfiprintf_r+0x230>)
 800445c:	a904      	add	r1, sp, #16
 800445e:	f000 f87d 	bl	800455c <_printf_i>
 8004462:	e7e4      	b.n	800442e <_vfiprintf_r+0x1ea>
 8004464:	08004be2 	.word	0x08004be2
 8004468:	08004be8 	.word	0x08004be8
 800446c:	08004bec 	.word	0x08004bec
 8004470:	00000000 	.word	0x00000000
 8004474:	0800421f 	.word	0x0800421f

08004478 <_printf_common>:
 8004478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800447c:	4616      	mov	r6, r2
 800447e:	4699      	mov	r9, r3
 8004480:	688a      	ldr	r2, [r1, #8]
 8004482:	690b      	ldr	r3, [r1, #16]
 8004484:	4607      	mov	r7, r0
 8004486:	4293      	cmp	r3, r2
 8004488:	bfb8      	it	lt
 800448a:	4613      	movlt	r3, r2
 800448c:	6033      	str	r3, [r6, #0]
 800448e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004492:	460c      	mov	r4, r1
 8004494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004498:	b10a      	cbz	r2, 800449e <_printf_common+0x26>
 800449a:	3301      	adds	r3, #1
 800449c:	6033      	str	r3, [r6, #0]
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	0699      	lsls	r1, r3, #26
 80044a2:	bf42      	ittt	mi
 80044a4:	6833      	ldrmi	r3, [r6, #0]
 80044a6:	3302      	addmi	r3, #2
 80044a8:	6033      	strmi	r3, [r6, #0]
 80044aa:	6825      	ldr	r5, [r4, #0]
 80044ac:	f015 0506 	ands.w	r5, r5, #6
 80044b0:	d106      	bne.n	80044c0 <_printf_common+0x48>
 80044b2:	f104 0a19 	add.w	sl, r4, #25
 80044b6:	68e3      	ldr	r3, [r4, #12]
 80044b8:	6832      	ldr	r2, [r6, #0]
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	42ab      	cmp	r3, r5
 80044be:	dc2b      	bgt.n	8004518 <_printf_common+0xa0>
 80044c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044c4:	1e13      	subs	r3, r2, #0
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	bf18      	it	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	0692      	lsls	r2, r2, #26
 80044ce:	d430      	bmi.n	8004532 <_printf_common+0xba>
 80044d0:	4649      	mov	r1, r9
 80044d2:	4638      	mov	r0, r7
 80044d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044d8:	47c0      	blx	r8
 80044da:	3001      	adds	r0, #1
 80044dc:	d023      	beq.n	8004526 <_printf_common+0xae>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	6922      	ldr	r2, [r4, #16]
 80044e2:	f003 0306 	and.w	r3, r3, #6
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf14      	ite	ne
 80044ea:	2500      	movne	r5, #0
 80044ec:	6833      	ldreq	r3, [r6, #0]
 80044ee:	f04f 0600 	mov.w	r6, #0
 80044f2:	bf08      	it	eq
 80044f4:	68e5      	ldreq	r5, [r4, #12]
 80044f6:	f104 041a 	add.w	r4, r4, #26
 80044fa:	bf08      	it	eq
 80044fc:	1aed      	subeq	r5, r5, r3
 80044fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004502:	bf08      	it	eq
 8004504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004508:	4293      	cmp	r3, r2
 800450a:	bfc4      	itt	gt
 800450c:	1a9b      	subgt	r3, r3, r2
 800450e:	18ed      	addgt	r5, r5, r3
 8004510:	42b5      	cmp	r5, r6
 8004512:	d11a      	bne.n	800454a <_printf_common+0xd2>
 8004514:	2000      	movs	r0, #0
 8004516:	e008      	b.n	800452a <_printf_common+0xb2>
 8004518:	2301      	movs	r3, #1
 800451a:	4652      	mov	r2, sl
 800451c:	4649      	mov	r1, r9
 800451e:	4638      	mov	r0, r7
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d103      	bne.n	800452e <_printf_common+0xb6>
 8004526:	f04f 30ff 	mov.w	r0, #4294967295
 800452a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452e:	3501      	adds	r5, #1
 8004530:	e7c1      	b.n	80044b6 <_printf_common+0x3e>
 8004532:	2030      	movs	r0, #48	; 0x30
 8004534:	18e1      	adds	r1, r4, r3
 8004536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004540:	4422      	add	r2, r4
 8004542:	3302      	adds	r3, #2
 8004544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004548:	e7c2      	b.n	80044d0 <_printf_common+0x58>
 800454a:	2301      	movs	r3, #1
 800454c:	4622      	mov	r2, r4
 800454e:	4649      	mov	r1, r9
 8004550:	4638      	mov	r0, r7
 8004552:	47c0      	blx	r8
 8004554:	3001      	adds	r0, #1
 8004556:	d0e6      	beq.n	8004526 <_printf_common+0xae>
 8004558:	3601      	adds	r6, #1
 800455a:	e7d9      	b.n	8004510 <_printf_common+0x98>

0800455c <_printf_i>:
 800455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	7e0f      	ldrb	r7, [r1, #24]
 8004562:	4691      	mov	r9, r2
 8004564:	2f78      	cmp	r7, #120	; 0x78
 8004566:	4680      	mov	r8, r0
 8004568:	460c      	mov	r4, r1
 800456a:	469a      	mov	sl, r3
 800456c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800456e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004572:	d807      	bhi.n	8004584 <_printf_i+0x28>
 8004574:	2f62      	cmp	r7, #98	; 0x62
 8004576:	d80a      	bhi.n	800458e <_printf_i+0x32>
 8004578:	2f00      	cmp	r7, #0
 800457a:	f000 80d5 	beq.w	8004728 <_printf_i+0x1cc>
 800457e:	2f58      	cmp	r7, #88	; 0x58
 8004580:	f000 80c1 	beq.w	8004706 <_printf_i+0x1aa>
 8004584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800458c:	e03a      	b.n	8004604 <_printf_i+0xa8>
 800458e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004592:	2b15      	cmp	r3, #21
 8004594:	d8f6      	bhi.n	8004584 <_printf_i+0x28>
 8004596:	a101      	add	r1, pc, #4	; (adr r1, 800459c <_printf_i+0x40>)
 8004598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004585 	.word	0x08004585
 80045a8:	08004585 	.word	0x08004585
 80045ac:	08004585 	.word	0x08004585
 80045b0:	08004585 	.word	0x08004585
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004585 	.word	0x08004585
 80045bc:	08004585 	.word	0x08004585
 80045c0:	08004585 	.word	0x08004585
 80045c4:	08004585 	.word	0x08004585
 80045c8:	0800470f 	.word	0x0800470f
 80045cc:	08004635 	.word	0x08004635
 80045d0:	080046c9 	.word	0x080046c9
 80045d4:	08004585 	.word	0x08004585
 80045d8:	08004585 	.word	0x08004585
 80045dc:	08004731 	.word	0x08004731
 80045e0:	08004585 	.word	0x08004585
 80045e4:	08004635 	.word	0x08004635
 80045e8:	08004585 	.word	0x08004585
 80045ec:	08004585 	.word	0x08004585
 80045f0:	080046d1 	.word	0x080046d1
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	602a      	str	r2, [r5, #0]
 80045fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004604:	2301      	movs	r3, #1
 8004606:	e0a0      	b.n	800474a <_printf_i+0x1ee>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	682b      	ldr	r3, [r5, #0]
 800460c:	0607      	lsls	r7, r0, #24
 800460e:	f103 0104 	add.w	r1, r3, #4
 8004612:	6029      	str	r1, [r5, #0]
 8004614:	d501      	bpl.n	800461a <_printf_i+0xbe>
 8004616:	681e      	ldr	r6, [r3, #0]
 8004618:	e003      	b.n	8004622 <_printf_i+0xc6>
 800461a:	0646      	lsls	r6, r0, #25
 800461c:	d5fb      	bpl.n	8004616 <_printf_i+0xba>
 800461e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004622:	2e00      	cmp	r6, #0
 8004624:	da03      	bge.n	800462e <_printf_i+0xd2>
 8004626:	232d      	movs	r3, #45	; 0x2d
 8004628:	4276      	negs	r6, r6
 800462a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800462e:	230a      	movs	r3, #10
 8004630:	4859      	ldr	r0, [pc, #356]	; (8004798 <_printf_i+0x23c>)
 8004632:	e012      	b.n	800465a <_printf_i+0xfe>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	6820      	ldr	r0, [r4, #0]
 8004638:	1d19      	adds	r1, r3, #4
 800463a:	6029      	str	r1, [r5, #0]
 800463c:	0605      	lsls	r5, r0, #24
 800463e:	d501      	bpl.n	8004644 <_printf_i+0xe8>
 8004640:	681e      	ldr	r6, [r3, #0]
 8004642:	e002      	b.n	800464a <_printf_i+0xee>
 8004644:	0641      	lsls	r1, r0, #25
 8004646:	d5fb      	bpl.n	8004640 <_printf_i+0xe4>
 8004648:	881e      	ldrh	r6, [r3, #0]
 800464a:	2f6f      	cmp	r7, #111	; 0x6f
 800464c:	bf0c      	ite	eq
 800464e:	2308      	moveq	r3, #8
 8004650:	230a      	movne	r3, #10
 8004652:	4851      	ldr	r0, [pc, #324]	; (8004798 <_printf_i+0x23c>)
 8004654:	2100      	movs	r1, #0
 8004656:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800465a:	6865      	ldr	r5, [r4, #4]
 800465c:	2d00      	cmp	r5, #0
 800465e:	bfa8      	it	ge
 8004660:	6821      	ldrge	r1, [r4, #0]
 8004662:	60a5      	str	r5, [r4, #8]
 8004664:	bfa4      	itt	ge
 8004666:	f021 0104 	bicge.w	r1, r1, #4
 800466a:	6021      	strge	r1, [r4, #0]
 800466c:	b90e      	cbnz	r6, 8004672 <_printf_i+0x116>
 800466e:	2d00      	cmp	r5, #0
 8004670:	d04b      	beq.n	800470a <_printf_i+0x1ae>
 8004672:	4615      	mov	r5, r2
 8004674:	fbb6 f1f3 	udiv	r1, r6, r3
 8004678:	fb03 6711 	mls	r7, r3, r1, r6
 800467c:	5dc7      	ldrb	r7, [r0, r7]
 800467e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004682:	4637      	mov	r7, r6
 8004684:	42bb      	cmp	r3, r7
 8004686:	460e      	mov	r6, r1
 8004688:	d9f4      	bls.n	8004674 <_printf_i+0x118>
 800468a:	2b08      	cmp	r3, #8
 800468c:	d10b      	bne.n	80046a6 <_printf_i+0x14a>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	07de      	lsls	r6, r3, #31
 8004692:	d508      	bpl.n	80046a6 <_printf_i+0x14a>
 8004694:	6923      	ldr	r3, [r4, #16]
 8004696:	6861      	ldr	r1, [r4, #4]
 8004698:	4299      	cmp	r1, r3
 800469a:	bfde      	ittt	le
 800469c:	2330      	movle	r3, #48	; 0x30
 800469e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046a6:	1b52      	subs	r2, r2, r5
 80046a8:	6122      	str	r2, [r4, #16]
 80046aa:	464b      	mov	r3, r9
 80046ac:	4621      	mov	r1, r4
 80046ae:	4640      	mov	r0, r8
 80046b0:	f8cd a000 	str.w	sl, [sp]
 80046b4:	aa03      	add	r2, sp, #12
 80046b6:	f7ff fedf 	bl	8004478 <_printf_common>
 80046ba:	3001      	adds	r0, #1
 80046bc:	d14a      	bne.n	8004754 <_printf_i+0x1f8>
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	b004      	add	sp, #16
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	f043 0320 	orr.w	r3, r3, #32
 80046ce:	6023      	str	r3, [r4, #0]
 80046d0:	2778      	movs	r7, #120	; 0x78
 80046d2:	4832      	ldr	r0, [pc, #200]	; (800479c <_printf_i+0x240>)
 80046d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	6829      	ldr	r1, [r5, #0]
 80046dc:	061f      	lsls	r7, r3, #24
 80046de:	f851 6b04 	ldr.w	r6, [r1], #4
 80046e2:	d402      	bmi.n	80046ea <_printf_i+0x18e>
 80046e4:	065f      	lsls	r7, r3, #25
 80046e6:	bf48      	it	mi
 80046e8:	b2b6      	uxthmi	r6, r6
 80046ea:	07df      	lsls	r7, r3, #31
 80046ec:	bf48      	it	mi
 80046ee:	f043 0320 	orrmi.w	r3, r3, #32
 80046f2:	6029      	str	r1, [r5, #0]
 80046f4:	bf48      	it	mi
 80046f6:	6023      	strmi	r3, [r4, #0]
 80046f8:	b91e      	cbnz	r6, 8004702 <_printf_i+0x1a6>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	f023 0320 	bic.w	r3, r3, #32
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	2310      	movs	r3, #16
 8004704:	e7a6      	b.n	8004654 <_printf_i+0xf8>
 8004706:	4824      	ldr	r0, [pc, #144]	; (8004798 <_printf_i+0x23c>)
 8004708:	e7e4      	b.n	80046d4 <_printf_i+0x178>
 800470a:	4615      	mov	r5, r2
 800470c:	e7bd      	b.n	800468a <_printf_i+0x12e>
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	6826      	ldr	r6, [r4, #0]
 8004712:	1d18      	adds	r0, r3, #4
 8004714:	6961      	ldr	r1, [r4, #20]
 8004716:	6028      	str	r0, [r5, #0]
 8004718:	0635      	lsls	r5, r6, #24
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	d501      	bpl.n	8004722 <_printf_i+0x1c6>
 800471e:	6019      	str	r1, [r3, #0]
 8004720:	e002      	b.n	8004728 <_printf_i+0x1cc>
 8004722:	0670      	lsls	r0, r6, #25
 8004724:	d5fb      	bpl.n	800471e <_printf_i+0x1c2>
 8004726:	8019      	strh	r1, [r3, #0]
 8004728:	2300      	movs	r3, #0
 800472a:	4615      	mov	r5, r2
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	e7bc      	b.n	80046aa <_printf_i+0x14e>
 8004730:	682b      	ldr	r3, [r5, #0]
 8004732:	2100      	movs	r1, #0
 8004734:	1d1a      	adds	r2, r3, #4
 8004736:	602a      	str	r2, [r5, #0]
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	6862      	ldr	r2, [r4, #4]
 800473c:	4628      	mov	r0, r5
 800473e:	f000 fa01 	bl	8004b44 <memchr>
 8004742:	b108      	cbz	r0, 8004748 <_printf_i+0x1ec>
 8004744:	1b40      	subs	r0, r0, r5
 8004746:	6060      	str	r0, [r4, #4]
 8004748:	6863      	ldr	r3, [r4, #4]
 800474a:	6123      	str	r3, [r4, #16]
 800474c:	2300      	movs	r3, #0
 800474e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004752:	e7aa      	b.n	80046aa <_printf_i+0x14e>
 8004754:	462a      	mov	r2, r5
 8004756:	4649      	mov	r1, r9
 8004758:	4640      	mov	r0, r8
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	47d0      	blx	sl
 800475e:	3001      	adds	r0, #1
 8004760:	d0ad      	beq.n	80046be <_printf_i+0x162>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	079b      	lsls	r3, r3, #30
 8004766:	d413      	bmi.n	8004790 <_printf_i+0x234>
 8004768:	68e0      	ldr	r0, [r4, #12]
 800476a:	9b03      	ldr	r3, [sp, #12]
 800476c:	4298      	cmp	r0, r3
 800476e:	bfb8      	it	lt
 8004770:	4618      	movlt	r0, r3
 8004772:	e7a6      	b.n	80046c2 <_printf_i+0x166>
 8004774:	2301      	movs	r3, #1
 8004776:	4632      	mov	r2, r6
 8004778:	4649      	mov	r1, r9
 800477a:	4640      	mov	r0, r8
 800477c:	47d0      	blx	sl
 800477e:	3001      	adds	r0, #1
 8004780:	d09d      	beq.n	80046be <_printf_i+0x162>
 8004782:	3501      	adds	r5, #1
 8004784:	68e3      	ldr	r3, [r4, #12]
 8004786:	9903      	ldr	r1, [sp, #12]
 8004788:	1a5b      	subs	r3, r3, r1
 800478a:	42ab      	cmp	r3, r5
 800478c:	dcf2      	bgt.n	8004774 <_printf_i+0x218>
 800478e:	e7eb      	b.n	8004768 <_printf_i+0x20c>
 8004790:	2500      	movs	r5, #0
 8004792:	f104 0619 	add.w	r6, r4, #25
 8004796:	e7f5      	b.n	8004784 <_printf_i+0x228>
 8004798:	08004bf3 	.word	0x08004bf3
 800479c:	08004c04 	.word	0x08004c04

080047a0 <__sflush_r>:
 80047a0:	898a      	ldrh	r2, [r1, #12]
 80047a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a4:	4605      	mov	r5, r0
 80047a6:	0710      	lsls	r0, r2, #28
 80047a8:	460c      	mov	r4, r1
 80047aa:	d457      	bmi.n	800485c <__sflush_r+0xbc>
 80047ac:	684b      	ldr	r3, [r1, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	dc04      	bgt.n	80047bc <__sflush_r+0x1c>
 80047b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc01      	bgt.n	80047bc <__sflush_r+0x1c>
 80047b8:	2000      	movs	r0, #0
 80047ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d0fa      	beq.n	80047b8 <__sflush_r+0x18>
 80047c2:	2300      	movs	r3, #0
 80047c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047c8:	682f      	ldr	r7, [r5, #0]
 80047ca:	6a21      	ldr	r1, [r4, #32]
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	d032      	beq.n	8004836 <__sflush_r+0x96>
 80047d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	075a      	lsls	r2, r3, #29
 80047d6:	d505      	bpl.n	80047e4 <__sflush_r+0x44>
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	1ac0      	subs	r0, r0, r3
 80047dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047de:	b10b      	cbz	r3, 80047e4 <__sflush_r+0x44>
 80047e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e2:	1ac0      	subs	r0, r0, r3
 80047e4:	2300      	movs	r3, #0
 80047e6:	4602      	mov	r2, r0
 80047e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ea:	4628      	mov	r0, r5
 80047ec:	6a21      	ldr	r1, [r4, #32]
 80047ee:	47b0      	blx	r6
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	d106      	bne.n	8004804 <__sflush_r+0x64>
 80047f6:	6829      	ldr	r1, [r5, #0]
 80047f8:	291d      	cmp	r1, #29
 80047fa:	d82b      	bhi.n	8004854 <__sflush_r+0xb4>
 80047fc:	4a28      	ldr	r2, [pc, #160]	; (80048a0 <__sflush_r+0x100>)
 80047fe:	410a      	asrs	r2, r1
 8004800:	07d6      	lsls	r6, r2, #31
 8004802:	d427      	bmi.n	8004854 <__sflush_r+0xb4>
 8004804:	2200      	movs	r2, #0
 8004806:	6062      	str	r2, [r4, #4]
 8004808:	6922      	ldr	r2, [r4, #16]
 800480a:	04d9      	lsls	r1, r3, #19
 800480c:	6022      	str	r2, [r4, #0]
 800480e:	d504      	bpl.n	800481a <__sflush_r+0x7a>
 8004810:	1c42      	adds	r2, r0, #1
 8004812:	d101      	bne.n	8004818 <__sflush_r+0x78>
 8004814:	682b      	ldr	r3, [r5, #0]
 8004816:	b903      	cbnz	r3, 800481a <__sflush_r+0x7a>
 8004818:	6560      	str	r0, [r4, #84]	; 0x54
 800481a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800481c:	602f      	str	r7, [r5, #0]
 800481e:	2900      	cmp	r1, #0
 8004820:	d0ca      	beq.n	80047b8 <__sflush_r+0x18>
 8004822:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004826:	4299      	cmp	r1, r3
 8004828:	d002      	beq.n	8004830 <__sflush_r+0x90>
 800482a:	4628      	mov	r0, r5
 800482c:	f7ff fbe6 	bl	8003ffc <_free_r>
 8004830:	2000      	movs	r0, #0
 8004832:	6360      	str	r0, [r4, #52]	; 0x34
 8004834:	e7c1      	b.n	80047ba <__sflush_r+0x1a>
 8004836:	2301      	movs	r3, #1
 8004838:	4628      	mov	r0, r5
 800483a:	47b0      	blx	r6
 800483c:	1c41      	adds	r1, r0, #1
 800483e:	d1c8      	bne.n	80047d2 <__sflush_r+0x32>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0c5      	beq.n	80047d2 <__sflush_r+0x32>
 8004846:	2b1d      	cmp	r3, #29
 8004848:	d001      	beq.n	800484e <__sflush_r+0xae>
 800484a:	2b16      	cmp	r3, #22
 800484c:	d101      	bne.n	8004852 <__sflush_r+0xb2>
 800484e:	602f      	str	r7, [r5, #0]
 8004850:	e7b2      	b.n	80047b8 <__sflush_r+0x18>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004858:	81a3      	strh	r3, [r4, #12]
 800485a:	e7ae      	b.n	80047ba <__sflush_r+0x1a>
 800485c:	690f      	ldr	r7, [r1, #16]
 800485e:	2f00      	cmp	r7, #0
 8004860:	d0aa      	beq.n	80047b8 <__sflush_r+0x18>
 8004862:	0793      	lsls	r3, r2, #30
 8004864:	bf18      	it	ne
 8004866:	2300      	movne	r3, #0
 8004868:	680e      	ldr	r6, [r1, #0]
 800486a:	bf08      	it	eq
 800486c:	694b      	ldreq	r3, [r1, #20]
 800486e:	1bf6      	subs	r6, r6, r7
 8004870:	600f      	str	r7, [r1, #0]
 8004872:	608b      	str	r3, [r1, #8]
 8004874:	2e00      	cmp	r6, #0
 8004876:	dd9f      	ble.n	80047b8 <__sflush_r+0x18>
 8004878:	4633      	mov	r3, r6
 800487a:	463a      	mov	r2, r7
 800487c:	4628      	mov	r0, r5
 800487e:	6a21      	ldr	r1, [r4, #32]
 8004880:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004884:	47e0      	blx	ip
 8004886:	2800      	cmp	r0, #0
 8004888:	dc06      	bgt.n	8004898 <__sflush_r+0xf8>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	e790      	b.n	80047ba <__sflush_r+0x1a>
 8004898:	4407      	add	r7, r0
 800489a:	1a36      	subs	r6, r6, r0
 800489c:	e7ea      	b.n	8004874 <__sflush_r+0xd4>
 800489e:	bf00      	nop
 80048a0:	dfbffffe 	.word	0xdfbffffe

080048a4 <_fflush_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	4605      	mov	r5, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	b913      	cbnz	r3, 80048b4 <_fflush_r+0x10>
 80048ae:	2500      	movs	r5, #0
 80048b0:	4628      	mov	r0, r5
 80048b2:	bd38      	pop	{r3, r4, r5, pc}
 80048b4:	b118      	cbz	r0, 80048be <_fflush_r+0x1a>
 80048b6:	6a03      	ldr	r3, [r0, #32]
 80048b8:	b90b      	cbnz	r3, 80048be <_fflush_r+0x1a>
 80048ba:	f7ff f9e9 	bl	8003c90 <__sinit>
 80048be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d0f3      	beq.n	80048ae <_fflush_r+0xa>
 80048c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c8:	07d0      	lsls	r0, r2, #31
 80048ca:	d404      	bmi.n	80048d6 <_fflush_r+0x32>
 80048cc:	0599      	lsls	r1, r3, #22
 80048ce:	d402      	bmi.n	80048d6 <_fflush_r+0x32>
 80048d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048d2:	f7ff fb90 	bl	8003ff6 <__retarget_lock_acquire_recursive>
 80048d6:	4628      	mov	r0, r5
 80048d8:	4621      	mov	r1, r4
 80048da:	f7ff ff61 	bl	80047a0 <__sflush_r>
 80048de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048e0:	4605      	mov	r5, r0
 80048e2:	07da      	lsls	r2, r3, #31
 80048e4:	d4e4      	bmi.n	80048b0 <_fflush_r+0xc>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	059b      	lsls	r3, r3, #22
 80048ea:	d4e1      	bmi.n	80048b0 <_fflush_r+0xc>
 80048ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ee:	f7ff fb83 	bl	8003ff8 <__retarget_lock_release_recursive>
 80048f2:	e7dd      	b.n	80048b0 <_fflush_r+0xc>

080048f4 <__swhatbuf_r>:
 80048f4:	b570      	push	{r4, r5, r6, lr}
 80048f6:	460c      	mov	r4, r1
 80048f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048fc:	4615      	mov	r5, r2
 80048fe:	2900      	cmp	r1, #0
 8004900:	461e      	mov	r6, r3
 8004902:	b096      	sub	sp, #88	; 0x58
 8004904:	da0c      	bge.n	8004920 <__swhatbuf_r+0x2c>
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	2100      	movs	r1, #0
 800490a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800490e:	bf0c      	ite	eq
 8004910:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004914:	2340      	movne	r3, #64	; 0x40
 8004916:	2000      	movs	r0, #0
 8004918:	6031      	str	r1, [r6, #0]
 800491a:	602b      	str	r3, [r5, #0]
 800491c:	b016      	add	sp, #88	; 0x58
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	466a      	mov	r2, sp
 8004922:	f000 f8dd 	bl	8004ae0 <_fstat_r>
 8004926:	2800      	cmp	r0, #0
 8004928:	dbed      	blt.n	8004906 <__swhatbuf_r+0x12>
 800492a:	9901      	ldr	r1, [sp, #4]
 800492c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004930:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004934:	4259      	negs	r1, r3
 8004936:	4159      	adcs	r1, r3
 8004938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493c:	e7eb      	b.n	8004916 <__swhatbuf_r+0x22>

0800493e <__smakebuf_r>:
 800493e:	898b      	ldrh	r3, [r1, #12]
 8004940:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004942:	079d      	lsls	r5, r3, #30
 8004944:	4606      	mov	r6, r0
 8004946:	460c      	mov	r4, r1
 8004948:	d507      	bpl.n	800495a <__smakebuf_r+0x1c>
 800494a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800494e:	6023      	str	r3, [r4, #0]
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	2301      	movs	r3, #1
 8004954:	6163      	str	r3, [r4, #20]
 8004956:	b002      	add	sp, #8
 8004958:	bd70      	pop	{r4, r5, r6, pc}
 800495a:	466a      	mov	r2, sp
 800495c:	ab01      	add	r3, sp, #4
 800495e:	f7ff ffc9 	bl	80048f4 <__swhatbuf_r>
 8004962:	9900      	ldr	r1, [sp, #0]
 8004964:	4605      	mov	r5, r0
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff fbb8 	bl	80040dc <_malloc_r>
 800496c:	b948      	cbnz	r0, 8004982 <__smakebuf_r+0x44>
 800496e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004972:	059a      	lsls	r2, r3, #22
 8004974:	d4ef      	bmi.n	8004956 <__smakebuf_r+0x18>
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	81a3      	strh	r3, [r4, #12]
 8004980:	e7e3      	b.n	800494a <__smakebuf_r+0xc>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	6020      	str	r0, [r4, #0]
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	81a3      	strh	r3, [r4, #12]
 800498c:	9b00      	ldr	r3, [sp, #0]
 800498e:	6120      	str	r0, [r4, #16]
 8004990:	6163      	str	r3, [r4, #20]
 8004992:	9b01      	ldr	r3, [sp, #4]
 8004994:	b15b      	cbz	r3, 80049ae <__smakebuf_r+0x70>
 8004996:	4630      	mov	r0, r6
 8004998:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800499c:	f000 f8b2 	bl	8004b04 <_isatty_r>
 80049a0:	b128      	cbz	r0, 80049ae <__smakebuf_r+0x70>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	89a3      	ldrh	r3, [r4, #12]
 80049b0:	431d      	orrs	r5, r3
 80049b2:	81a5      	strh	r5, [r4, #12]
 80049b4:	e7cf      	b.n	8004956 <__smakebuf_r+0x18>

080049b6 <__swbuf_r>:
 80049b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b8:	460e      	mov	r6, r1
 80049ba:	4614      	mov	r4, r2
 80049bc:	4605      	mov	r5, r0
 80049be:	b118      	cbz	r0, 80049c8 <__swbuf_r+0x12>
 80049c0:	6a03      	ldr	r3, [r0, #32]
 80049c2:	b90b      	cbnz	r3, 80049c8 <__swbuf_r+0x12>
 80049c4:	f7ff f964 	bl	8003c90 <__sinit>
 80049c8:	69a3      	ldr	r3, [r4, #24]
 80049ca:	60a3      	str	r3, [r4, #8]
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	071a      	lsls	r2, r3, #28
 80049d0:	d525      	bpl.n	8004a1e <__swbuf_r+0x68>
 80049d2:	6923      	ldr	r3, [r4, #16]
 80049d4:	b31b      	cbz	r3, 8004a1e <__swbuf_r+0x68>
 80049d6:	6823      	ldr	r3, [r4, #0]
 80049d8:	6922      	ldr	r2, [r4, #16]
 80049da:	b2f6      	uxtb	r6, r6
 80049dc:	1a98      	subs	r0, r3, r2
 80049de:	6963      	ldr	r3, [r4, #20]
 80049e0:	4637      	mov	r7, r6
 80049e2:	4283      	cmp	r3, r0
 80049e4:	dc04      	bgt.n	80049f0 <__swbuf_r+0x3a>
 80049e6:	4621      	mov	r1, r4
 80049e8:	4628      	mov	r0, r5
 80049ea:	f7ff ff5b 	bl	80048a4 <_fflush_r>
 80049ee:	b9e0      	cbnz	r0, 8004a2a <__swbuf_r+0x74>
 80049f0:	68a3      	ldr	r3, [r4, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	60a3      	str	r3, [r4, #8]
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	6022      	str	r2, [r4, #0]
 80049fc:	701e      	strb	r6, [r3, #0]
 80049fe:	6962      	ldr	r2, [r4, #20]
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d004      	beq.n	8004a10 <__swbuf_r+0x5a>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	07db      	lsls	r3, r3, #31
 8004a0a:	d506      	bpl.n	8004a1a <__swbuf_r+0x64>
 8004a0c:	2e0a      	cmp	r6, #10
 8004a0e:	d104      	bne.n	8004a1a <__swbuf_r+0x64>
 8004a10:	4621      	mov	r1, r4
 8004a12:	4628      	mov	r0, r5
 8004a14:	f7ff ff46 	bl	80048a4 <_fflush_r>
 8004a18:	b938      	cbnz	r0, 8004a2a <__swbuf_r+0x74>
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f805 	bl	8004a30 <__swsetup_r>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d0d5      	beq.n	80049d6 <__swbuf_r+0x20>
 8004a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a2e:	e7f4      	b.n	8004a1a <__swbuf_r+0x64>

08004a30 <__swsetup_r>:
 8004a30:	b538      	push	{r3, r4, r5, lr}
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <__swsetup_r+0xac>)
 8004a34:	4605      	mov	r5, r0
 8004a36:	6818      	ldr	r0, [r3, #0]
 8004a38:	460c      	mov	r4, r1
 8004a3a:	b118      	cbz	r0, 8004a44 <__swsetup_r+0x14>
 8004a3c:	6a03      	ldr	r3, [r0, #32]
 8004a3e:	b90b      	cbnz	r3, 8004a44 <__swsetup_r+0x14>
 8004a40:	f7ff f926 	bl	8003c90 <__sinit>
 8004a44:	89a3      	ldrh	r3, [r4, #12]
 8004a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a4a:	0718      	lsls	r0, r3, #28
 8004a4c:	d422      	bmi.n	8004a94 <__swsetup_r+0x64>
 8004a4e:	06d9      	lsls	r1, r3, #27
 8004a50:	d407      	bmi.n	8004a62 <__swsetup_r+0x32>
 8004a52:	2309      	movs	r3, #9
 8004a54:	602b      	str	r3, [r5, #0]
 8004a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5e:	81a3      	strh	r3, [r4, #12]
 8004a60:	e034      	b.n	8004acc <__swsetup_r+0x9c>
 8004a62:	0758      	lsls	r0, r3, #29
 8004a64:	d512      	bpl.n	8004a8c <__swsetup_r+0x5c>
 8004a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a68:	b141      	cbz	r1, 8004a7c <__swsetup_r+0x4c>
 8004a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6e:	4299      	cmp	r1, r3
 8004a70:	d002      	beq.n	8004a78 <__swsetup_r+0x48>
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7ff fac2 	bl	8003ffc <_free_r>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8004a7c:	89a3      	ldrh	r3, [r4, #12]
 8004a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a82:	81a3      	strh	r3, [r4, #12]
 8004a84:	2300      	movs	r3, #0
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	6023      	str	r3, [r4, #0]
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	f043 0308 	orr.w	r3, r3, #8
 8004a92:	81a3      	strh	r3, [r4, #12]
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	b94b      	cbnz	r3, 8004aac <__swsetup_r+0x7c>
 8004a98:	89a3      	ldrh	r3, [r4, #12]
 8004a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa2:	d003      	beq.n	8004aac <__swsetup_r+0x7c>
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7ff ff49 	bl	800493e <__smakebuf_r>
 8004aac:	89a0      	ldrh	r0, [r4, #12]
 8004aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab2:	f010 0301 	ands.w	r3, r0, #1
 8004ab6:	d00a      	beq.n	8004ace <__swsetup_r+0x9e>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60a3      	str	r3, [r4, #8]
 8004abc:	6963      	ldr	r3, [r4, #20]
 8004abe:	425b      	negs	r3, r3
 8004ac0:	61a3      	str	r3, [r4, #24]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	b943      	cbnz	r3, 8004ad8 <__swsetup_r+0xa8>
 8004ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004aca:	d1c4      	bne.n	8004a56 <__swsetup_r+0x26>
 8004acc:	bd38      	pop	{r3, r4, r5, pc}
 8004ace:	0781      	lsls	r1, r0, #30
 8004ad0:	bf58      	it	pl
 8004ad2:	6963      	ldrpl	r3, [r4, #20]
 8004ad4:	60a3      	str	r3, [r4, #8]
 8004ad6:	e7f4      	b.n	8004ac2 <__swsetup_r+0x92>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e7f7      	b.n	8004acc <__swsetup_r+0x9c>
 8004adc:	20000064 	.word	0x20000064

08004ae0 <_fstat_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	4d06      	ldr	r5, [pc, #24]	; (8004b00 <_fstat_r+0x20>)
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	4611      	mov	r1, r2
 8004aec:	602b      	str	r3, [r5, #0]
 8004aee:	f7fc f9fe 	bl	8000eee <_fstat>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	d102      	bne.n	8004afc <_fstat_r+0x1c>
 8004af6:	682b      	ldr	r3, [r5, #0]
 8004af8:	b103      	cbz	r3, 8004afc <_fstat_r+0x1c>
 8004afa:	6023      	str	r3, [r4, #0]
 8004afc:	bd38      	pop	{r3, r4, r5, pc}
 8004afe:	bf00      	nop
 8004b00:	2000028c 	.word	0x2000028c

08004b04 <_isatty_r>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	2300      	movs	r3, #0
 8004b08:	4d05      	ldr	r5, [pc, #20]	; (8004b20 <_isatty_r+0x1c>)
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	f7fc f9fc 	bl	8000f0c <_isatty>
 8004b14:	1c43      	adds	r3, r0, #1
 8004b16:	d102      	bne.n	8004b1e <_isatty_r+0x1a>
 8004b18:	682b      	ldr	r3, [r5, #0]
 8004b1a:	b103      	cbz	r3, 8004b1e <_isatty_r+0x1a>
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	bd38      	pop	{r3, r4, r5, pc}
 8004b20:	2000028c 	.word	0x2000028c

08004b24 <_sbrk_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	2300      	movs	r3, #0
 8004b28:	4d05      	ldr	r5, [pc, #20]	; (8004b40 <_sbrk_r+0x1c>)
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4608      	mov	r0, r1
 8004b2e:	602b      	str	r3, [r5, #0]
 8004b30:	f7fc fa02 	bl	8000f38 <_sbrk>
 8004b34:	1c43      	adds	r3, r0, #1
 8004b36:	d102      	bne.n	8004b3e <_sbrk_r+0x1a>
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	b103      	cbz	r3, 8004b3e <_sbrk_r+0x1a>
 8004b3c:	6023      	str	r3, [r4, #0]
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	2000028c 	.word	0x2000028c

08004b44 <memchr>:
 8004b44:	4603      	mov	r3, r0
 8004b46:	b510      	push	{r4, lr}
 8004b48:	b2c9      	uxtb	r1, r1
 8004b4a:	4402      	add	r2, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	d101      	bne.n	8004b56 <memchr+0x12>
 8004b52:	2000      	movs	r0, #0
 8004b54:	e003      	b.n	8004b5e <memchr+0x1a>
 8004b56:	7804      	ldrb	r4, [r0, #0]
 8004b58:	3301      	adds	r3, #1
 8004b5a:	428c      	cmp	r4, r1
 8004b5c:	d1f6      	bne.n	8004b4c <memchr+0x8>
 8004b5e:	bd10      	pop	{r4, pc}

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
